
BLINKING_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062a  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>//header file for delaying LED bulbs

int main(void)
{
    DDRB =0b00100100;//In binary
  6c:	84 e2       	ldi	r24, 0x24	; 36
  6e:	87 bb       	out	0x17, r24	; 23
	//DDRB =0x24;//In hexadecimal   

    while (1) 
    {
		PORTB = 0b00000100;//turn off 1st led in 6th pin and turn on 2nd led in 3rd pin
  70:	94 e0       	ldi	r25, 0x04	; 4
		//PORTB |=(1<<2);         //turn on 2nd led in 3rd  pin using binary operators
		//PORTB &=~(1<<5);        //turn off 1st led in 6th  pin using binary operators
		
		_delay_ms(1000);          //wait 1000 milliseconds
		
		PORTB = 0b00100000;       //turn on 1st led in 6t pin and turn off 2nd LED in 3rd pin
  72:	80 e2       	ldi	r24, 0x20	; 32
    DDRB =0b00100100;//In binary
	//DDRB =0x24;//In hexadecimal   

    while (1) 
    {
		PORTB = 0b00000100;//turn off 1st led in 6th pin and turn on 2nd led in 3rd pin
  74:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f e3       	ldi	r18, 0x3F	; 63
  78:	3d e0       	ldi	r19, 0x0D	; 13
  7a:	43 e0       	ldi	r20, 0x03	; 3
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	30 40       	sbci	r19, 0x00	; 0
  80:	40 40       	sbci	r20, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
		//PORTB |=(1<<2);         //turn on 2nd led in 3rd  pin using binary operators
		//PORTB &=~(1<<5);        //turn off 1st led in 6th  pin using binary operators
		
		_delay_ms(1000);          //wait 1000 milliseconds
		
		PORTB = 0b00100000;       //turn on 1st led in 6t pin and turn off 2nd LED in 3rd pin
  88:	88 bb       	out	0x18, r24	; 24
  8a:	2f e3       	ldi	r18, 0x3F	; 63
  8c:	3d e0       	ldi	r19, 0x0D	; 13
  8e:	43 e0       	ldi	r20, 0x03	; 3
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
  9c:	eb cf       	rjmp	.-42     	; 0x74 <main+0x8>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>

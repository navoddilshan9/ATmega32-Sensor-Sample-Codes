
SLIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008dc  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 88 00 	call	0x110	; 0x110 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <rotate>:
	
	return 0;
}
void rotate(int PIR){
	
	switch(PIR){
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	91 05       	cpc	r25, r1
  84:	c1 f0       	breq	.+48     	; 0xb6 <rotate+0x36>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	91 05       	cpc	r25, r1
  8a:	41 f1       	breq	.+80     	; 0xdc <rotate+0x5c>
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	c9 f5       	brne	.+114    	; 0x102 <rotate+0x82>
		case 1:
		OCR1A = 3999 + 800;
  90:	8f eb       	ldi	r24, 0xBF	; 191
  92:	92 e1       	ldi	r25, 0x12	; 18
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		PORTC=0b000001;//turn on the light
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2a ea       	ldi	r18, 0xAA	; 170
  a2:	36 ee       	ldi	r19, 0xE6	; 230
  a4:	86 e9       	ldi	r24, 0x96	; 150
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	d9 f7       	brne	.-10     	; 0xa8 <rotate+0x28>
  b2:	00 00       	nop
  b4:	08 95       	ret
		_delay_ms(10000);
		break;
		case 2:
		OCR1A = 3999;
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		PORTC=0b000010;//turn on the light
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	2a ea       	ldi	r18, 0xAA	; 170
  c8:	36 ee       	ldi	r19, 0xE6	; 230
  ca:	86 e9       	ldi	r24, 0x96	; 150
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	d9 f7       	brne	.-10     	; 0xce <rotate+0x4e>
  d8:	00 00       	nop
  da:	08 95       	ret
		_delay_ms(10000);
		break;
		case 3:
		OCR1A = 3999 -800;
  dc:	8f e7       	ldi	r24, 0x7F	; 127
  de:	9c e0       	ldi	r25, 0x0C	; 12
  e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		PORTC=0b000100;//turn on the light
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	2a ea       	ldi	r18, 0xAA	; 170
  ee:	36 ee       	ldi	r19, 0xE6	; 230
  f0:	86 e9       	ldi	r24, 0x96	; 150
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	d9 f7       	brne	.-10     	; 0xf4 <rotate+0x74>
  fe:	00 00       	nop
 100:	08 95       	ret
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9c e9       	ldi	r25, 0x9C	; 156
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <rotate+0x86>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <rotate+0x8c>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void) {
	DDRB |= 1 << DDB1; // Set pin 9 on arduino to output
 110:	21 9a       	sbi	0x04, 1	; 4
	DDRB &= 1<< DDB2;  // Set pin 10 on arduino to input PIR 1
 112:	84 b1       	in	r24, 0x04	; 4
 114:	84 70       	andi	r24, 0x04	; 4
 116:	84 b9       	out	0x04, r24	; 4
	DDRB &= 1<< DDB3;  // Set pin 11 on arduino to input PIR 2
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	88 70       	andi	r24, 0x08	; 8
 11c:	84 b9       	out	0x04, r24	; 4
	DDRB &= 1<< DDB4;  // Set pin 12 on arduino to input PIR 3
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	80 71       	andi	r24, 0x10	; 16
 122:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
 124:	e0 e8       	ldi	r30, 0x80	; 128
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 68       	ori	r24, 0x82	; 130
 12c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11);
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8a 61       	ori	r24, 0x1A	; 26
 136:	80 83       	st	Z, r24
	
	ICR1 = 39999;
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 140:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	while (1)
	{
		
		int PIR1 =1<< DDB2 & PINB;
 144:	23 b1       	in	r18, 0x03	; 3
		int PIR2 =1<< DDB3 & PINB;
 146:	83 b1       	in	r24, 0x03	; 3
 148:	88 70       	andi	r24, 0x08	; 8
 14a:	48 2f       	mov	r20, r24
 14c:	50 e0       	ldi	r21, 0x00	; 0
		int PIR3 =1<< DDB4 & PINB;
 14e:	93 b1       	in	r25, 0x03	; 3
 150:	90 71       	andi	r25, 0x10	; 16
 152:	69 2f       	mov	r22, r25
 154:	70 e0       	ldi	r23, 0x00	; 0
		
		
		if(PIR1&1<<2 && DDB2 && PIR2==0x00 && PIR3==0x00){
 156:	22 ff       	sbrs	r18, 2
 158:	09 c0       	rjmp	.+18     	; 0x16c <main+0x5c>
 15a:	45 2b       	or	r20, r21
 15c:	c1 f4       	brne	.+48     	; 0x18e <main+0x7e>
 15e:	67 2b       	or	r22, r23
 160:	b1 f4       	brne	.+44     	; 0x18e <main+0x7e>
			rotate(1);//rotate left
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 40 00 	call	0x80	; 0x80 <rotate>
		int PIR1 =1<< DDB2 & PINB;
		int PIR2 =1<< DDB3 & PINB;
		int PIR3 =1<< DDB4 & PINB;
		
		
		if(PIR1&1<<2 && DDB2 && PIR2==0x00 && PIR3==0x00){
 16a:	11 c0       	rjmp	.+34     	; 0x18e <main+0x7e>
			rotate(1);//rotate left
			}else if(PIR1==0x00 && PIR2&1<<3 && PIR3==0x00){
 16c:	88 23       	and	r24, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <main+0x6e>
 170:	67 2b       	or	r22, r23
 172:	29 f4       	brne	.+10     	; 0x17e <main+0x6e>
			rotate(2);//no movement
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 40 00 	call	0x80	; 0x80 <rotate>
		int PIR3 =1<< DDB4 & PINB;
		
		
		if(PIR1&1<<2 && DDB2 && PIR2==0x00 && PIR3==0x00){
			rotate(1);//rotate left
			}else if(PIR1==0x00 && PIR2&1<<3 && PIR3==0x00){
 17c:	08 c0       	rjmp	.+16     	; 0x18e <main+0x7e>
			rotate(2);//no movement
			}else if(PIR1==0x00 && PIR2==0x00 && PIR3&1<<4){
 17e:	45 2b       	or	r20, r21
 180:	31 f4       	brne	.+12     	; 0x18e <main+0x7e>
 182:	99 23       	and	r25, r25
 184:	21 f0       	breq	.+8      	; 0x18e <main+0x7e>
			rotate(3);//rotate right
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 40 00 	call	0x80	; 0x80 <rotate>
		}
		rotate(2);//Back to center position
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 40 00 	call	0x80	; 0x80 <rotate>
	}
 196:	d6 cf       	rjmp	.-84     	; 0x144 <main+0x34>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>


GSM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  000010c8  0000115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ef  0080013c  0080013c  00001238  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018bb  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3b  00000000  00000000  00002c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd3  00000000  00000000  000036c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  0000429c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c62  00000000  00000000  00004bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 04 	call	0x826	; 0x826 <main>
      8a:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
      92:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
      94:	85 b3       	in	r24, 0x15	; 21
      96:	8c 7f       	andi	r24, 0xFC	; 252
      98:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
      9a:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      9c:	82 e0       	ldi	r24, 0x02	; 2
      9e:	8a 95       	dec	r24
      a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_Command+0xc>
      a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
      a4:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a6:	8f e6       	ldi	r24, 0x6F	; 111
      a8:	97 e1       	ldi	r25, 0x17	; 23
      aa:	01 97       	sbiw	r24, 0x01	; 1
      ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_Command+0x18>
      ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_Command+0x1e>
      b0:	00 00       	nop
      b2:	08 95       	ret

000000b4 <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
      b4:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
      b6:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
      b8:	85 b3       	in	r24, 0x15	; 21
      ba:	85 60       	ori	r24, 0x05	; 5
      bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	8a 95       	dec	r24
      c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Char+0xc>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
      c6:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c8:	8f ec       	ldi	r24, 0xCF	; 207
      ca:	97 e0       	ldi	r25, 0x07	; 7
      cc:	01 97       	sbiw	r24, 0x01	; 1
      ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x18>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Char+0x1e>
      d2:	00 00       	nop
      d4:	08 95       	ret

000000d6 <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
      d6:	84 b3       	in	r24, 0x14	; 20
      d8:	87 60       	ori	r24, 0x07	; 7
      da:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
      dc:	8f ef       	ldi	r24, 0xFF	; 255
      de:	87 bb       	out	0x17, r24	; 23
      e0:	8f e3       	ldi	r24, 0x3F	; 63
      e2:	9c e9       	ldi	r25, 0x9C	; 156
      e4:	01 97       	sbiw	r24, 0x01	; 1
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Init+0xe>
      e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_Init+0x14>
      ea:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
      ec:	88 e3       	ldi	r24, 0x38	; 56
      ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
      f2:	8c e0       	ldi	r24, 0x0C	; 12
      f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
      f8:	86 e0       	ldi	r24, 0x06	; 6
      fa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
     104:	80 e8       	ldi	r24, 0x80	; 128
     106:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     10a:	08 95       	ret

0000010c <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
     112:	88 81       	ld	r24, Y
     114:	88 23       	and	r24, r24
     116:	31 f0       	breq	.+12     	; 0x124 <LCD_String+0x18>
     118:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
     11a:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
     11e:	89 91       	ld	r24, Y+
     120:	81 11       	cpse	r24, r1
     122:	fb cf       	rjmp	.-10     	; 0x11a <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	ea 01       	movw	r28, r20
	if (row == 1)
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	31 f4       	brne	.+12     	; 0x140 <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
     134:	86 2f       	mov	r24, r22
     136:	8f 70       	andi	r24, 0x0F	; 15
     138:	80 68       	ori	r24, 0x80	; 128
     13a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     13e:	07 c0       	rjmp	.+14     	; 0x14e <LCD_String_xy+0x24>
	else if (row == 2)
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	29 f4       	brne	.+10     	; 0x14e <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
     144:	86 2f       	mov	r24, r22
     146:	8f 70       	andi	r24, 0x0F	; 15
     148:	80 6c       	ori	r24, 0xC0	; 192
     14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_String>
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command(0x01);								/* clear display */
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     160:	08 95       	ret

00000162 <GSM_Msg_Delete>:
	}
	_delay_ms(300);
	buffer_pointer = 0;
	memset(buff,0,strlen(buff));
	memset(sms_buffer,0,strlen(sms_buffer));
}
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	64 97       	sbiw	r28, 0x14	; 20
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     17e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	80 e6       	ldi	r24, 0x60	; 96
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9f 93       	push	r25
     18c:	8f 93       	push	r24
     18e:	8e 01       	movw	r16, r28
     190:	0f 5f       	subi	r16, 0xFF	; 255
     192:	1f 4f       	sbci	r17, 0xFF	; 255
     194:	1f 93       	push	r17
     196:	0f 93       	push	r16
     198:	0e 94 8a 05 	call	0xb14	; 0xb14 <sprintf>
     19c:	c8 01       	movw	r24, r16
     19e:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_SendString>
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	64 96       	adiw	r28, 0x14	; 20
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <GSM_Wait_for_Msg>:
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <GSM_Wait_for_Msg+0x6>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <GSM_Wait_for_Msg+0x8>
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	2f ef       	ldi	r18, 0xFF	; 255
     1d2:	84 e3       	ldi	r24, 0x34	; 52
     1d4:	9c e0       	ldi	r25, 0x0C	; 12
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	80 40       	sbci	r24, 0x00	; 0
     1da:	90 40       	sbci	r25, 0x00	; 0
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <GSM_Wait_for_Msg+0x12>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <GSM_Wait_for_Msg+0x1c>
     1e0:	00 00       	nop
     1e2:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     1e6:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
     1ea:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     1ee:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     1f2:	e1 5c       	subi	r30, 0xC1	; 193
     1f4:	fe 4f       	sbci	r31, 0xFE	; 254
     1f6:	80 81       	ld	r24, Z
     1f8:	8d 30       	cpi	r24, 0x0D	; 13
     1fa:	49 f0       	breq	.+18     	; 0x20e <GSM_Wait_for_Msg+0x4a>
     1fc:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     200:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     204:	e1 5c       	subi	r30, 0xC1	; 193
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	80 81       	ld	r24, Z
     20a:	8a 30       	cpi	r24, 0x0A	; 10
     20c:	51 f4       	brne	.+20     	; 0x222 <GSM_Wait_for_Msg+0x5e>
     20e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     212:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     21c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
     220:	e4 cf       	rjmp	.-56     	; 0x1ea <GSM_Wait_for_Msg+0x26>
     222:	60 e8       	ldi	r22, 0x80	; 128
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	8f e3       	ldi	r24, 0x3F	; 63
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 68 05 	call	0xad0	; 0xad0 <strstr>
     22e:	89 2b       	or	r24, r25
     230:	09 f4       	brne	.+2      	; 0x234 <GSM_Wait_for_Msg+0x70>
     232:	66 c0       	rjmp	.+204    	; 0x300 <GSM_Wait_for_Msg+0x13c>
     234:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     238:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     23c:	e1 5c       	subi	r30, 0xC1	; 193
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	80 81       	ld	r24, Z
     242:	8c 32       	cpi	r24, 0x2C	; 44
     244:	91 f0       	breq	.+36     	; 0x26a <GSM_Wait_for_Msg+0xa6>
     246:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     24a:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     254:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
     258:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     25c:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     260:	e1 5c       	subi	r30, 0xC1	; 193
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	80 81       	ld	r24, Z
     266:	8c 32       	cpi	r24, 0x2C	; 44
     268:	71 f7       	brne	.-36     	; 0x246 <GSM_Wait_for_Msg+0x82>
     26a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     26e:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     278:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
     27c:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     280:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     284:	e1 5c       	subi	r30, 0xC1	; 193
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	80 81       	ld	r24, Z
     28a:	8d 30       	cpi	r24, 0x0D	; 13
     28c:	e1 f0       	breq	.+56     	; 0x2c6 <GSM_Wait_for_Msg+0x102>
     28e:	de 01       	movw	r26, r28
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     296:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     29a:	e1 5c       	subi	r30, 0xC1	; 193
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	80 81       	ld	r24, Z
     2a0:	8d 93       	st	X+, r24
     2a2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     2a6:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     2b0:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
     2b4:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     2b8:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     2bc:	e1 5c       	subi	r30, 0xC1	; 193
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 30       	cpi	r24, 0x0D	; 13
     2c4:	31 f7       	brne	.-52     	; 0x292 <GSM_Wait_for_Msg+0xce>
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 35 05 	call	0xa6a	; 0xa6a <atoi>
     2ce:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
     2d2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     2d6:	ef e3       	ldi	r30, 0x3F	; 63
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	01 90       	ld	r0, Z+
     2dc:	00 20       	and	r0, r0
     2de:	e9 f7       	brne	.-6      	; 0x2da <GSM_Wait_for_Msg+0x116>
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	af 01       	movw	r20, r30
     2e4:	4f 53       	subi	r20, 0x3F	; 63
     2e6:	51 40       	sbci	r21, 0x01	; 1
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	8f e3       	ldi	r24, 0x3F	; 63
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <memset>
     2f4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     2f8:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <GSM_Wait_for_Msg+0x13e>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <__vector_13>:
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
     322:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     326:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     32a:	8c b1       	in	r24, 0x0c	; 12
     32c:	e1 5c       	subi	r30, 0xC1	; 193
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	80 83       	st	Z, r24
     332:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     336:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     340:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <status_flag>
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	9f 91       	pop	r25
     350:	8f 91       	pop	r24
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <GSM_Calling>:

void GSM_Calling(char *Mob_no)
{
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	64 97       	sbiw	r28, 0x14	; 20
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
	char call[20];
	sprintf(call,"ATD%s;\r",Mob_no);		
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	84 e9       	ldi	r24, 0x94	; 148
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	9f 93       	push	r25
     37e:	8f 93       	push	r24
     380:	8e 01       	movw	r16, r28
     382:	0f 5f       	subi	r16, 0xFF	; 255
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	1f 93       	push	r17
     388:	0f 93       	push	r16
     38a:	0e 94 8a 05 	call	0xb14	; 0xb14 <sprintf>
	USART_SendString(call);						        /* send command ATD<Mobile_No>; for calling*/
     38e:	c8 01       	movw	r24, r16
     390:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_SendString>
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
}
     3a0:	64 96       	adiw	r28, 0x14	; 20
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <GSM_HangCall>:

void GSM_HangCall()
{
	LCD_Clear();
     3b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
	USART_SendString("ATH\r");					        /*send command ATH\r to hang call*/
     3ba:	8c e9       	ldi	r24, 0x9C	; 156
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_SendString>
     3c2:	08 95       	ret

000003c4 <GSM_Response_Display>:
	}
	status_flag=0;
}

void GSM_Response_Display()
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
	buffer_pointer = 0;
     3c8:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     3cc:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
	int lcd_pointer = 0;
	while(1)
	{
		if(buff[buffer_pointer]== '\r' || buff[buffer_pointer]== '\n')  /* search for \r\n in string */
     3d0:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     3d4:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     3d8:	e1 5c       	subi	r30, 0xC1	; 193
     3da:	fe 4f       	sbci	r31, 0xFE	; 254
     3dc:	80 81       	ld	r24, Z
     3de:	8d 30       	cpi	r24, 0x0D	; 13
     3e0:	49 f0       	breq	.+18     	; 0x3f4 <GSM_Response_Display+0x30>
     3e2:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     3e6:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     3ea:	e1 5c       	subi	r30, 0xC1	; 193
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	80 81       	ld	r24, Z
     3f0:	8a 30       	cpi	r24, 0x0A	; 10
     3f2:	51 f4       	brne	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			buffer_pointer++;
     3f4:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     3f8:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     402:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
		}
		else
			break;
	}
     406:	e4 cf       	rjmp	.-56     	; 0x3d0 <GSM_Response_Display+0xc>
	

	LCD_Command(0xc0);
     408:	80 ec       	ldi	r24, 0xC0	; 192
     40a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
}

void GSM_Response_Display()
{
	buffer_pointer = 0;
	int lcd_pointer = 0;
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
	

	LCD_Command(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
     412:	19 c0       	rjmp	.+50     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		LCD_Char(buff[buffer_pointer]);								
     414:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     418:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     41c:	e1 5c       	subi	r30, 0xC1	; 193
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 81       	ld	r24, Z
     422:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Char>
		buffer_pointer++;
     426:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     42a:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     434:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
		lcd_pointer++;
     438:	21 96       	adiw	r28, 0x01	; 1
		if(lcd_pointer==15)								               /* check for end of LCD line */
     43a:	cf 30       	cpi	r28, 0x0F	; 15
     43c:	d1 05       	cpc	r29, r1
     43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		LCD_Command(0x80);
     440:	80 e8       	ldi	r24, 0x80	; 128
     442:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			break;
	}
	

	LCD_Command(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
     446:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     44a:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     44e:	e1 5c       	subi	r30, 0xC1	; 193
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	80 81       	ld	r24, Z
     454:	8d 30       	cpi	r24, 0x0D	; 13
     456:	f1 f6       	brne	.-68     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		buffer_pointer++;
		lcd_pointer++;
		if(lcd_pointer==15)								               /* check for end of LCD line */
		LCD_Command(0x80);
	}
	buffer_pointer=0;
     458:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     45c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
	memset(buff,0,strlen(buff));
     460:	ef e3       	ldi	r30, 0x3F	; 63
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	01 90       	ld	r0, Z+
     466:	00 20       	and	r0, r0
     468:	e9 f7       	brne	.-6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	af 01       	movw	r20, r30
     46e:	4f 53       	subi	r20, 0x3F	; 63
     470:	51 40       	sbci	r21, 0x01	; 1
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	8f e3       	ldi	r24, 0x3F	; 63
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <memset>
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <GSM_Response>:
	USART_SendString("ATH\r");					        /*send command ATH\r to hang call*/
	
}

void GSM_Response()
{
     484:	6f 92       	push	r6
     486:	7f 92       	push	r7
     488:	8f 92       	push	r8
     48a:	9f 92       	push	r9
     48c:	af 92       	push	r10
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <GSM_Response+0x1e>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
	unsigned int timeout=0;
     4a6:	e1 2c       	mov	r14, r1
     4a8:	f1 2c       	mov	r15, r1
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
		return;
		Response_Length = strlen(buff);
     4aa:	0f 2e       	mov	r0, r31
     4ac:	ff e3       	ldi	r31, 0x3F	; 63
     4ae:	cf 2e       	mov	r12, r31
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	df 2e       	mov	r13, r31
     4b4:	f0 2d       	mov	r31, r0
		{
			_delay_ms(2);
			timeout++;
			if(Response_Length==strlen(buff))
			{
				for(int i=0;i<Response_Length;i++)
     4b6:	61 2c       	mov	r6, r1
     4b8:	71 2c       	mov	r7, r1
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
		return;
		Response_Length = strlen(buff);
     4ba:	f6 01       	movw	r30, r12
     4bc:	01 90       	ld	r0, Z+
     4be:	00 20       	and	r0, r0
     4c0:	e9 f7       	brne	.-6      	; 0x4bc <GSM_Response+0x38>
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	ef 53       	subi	r30, 0x3F	; 63
     4c6:	f1 40       	sbci	r31, 0x01	; 1
		if(Response_Length)
     4c8:	c9 f1       	breq	.+114    	; 0x53c <GSM_Response+0xb8>
     4ca:	af e9       	ldi	r26, 0x9F	; 159
     4cc:	bf e0       	ldi	r27, 0x0F	; 15
     4ce:	11 97       	sbiw	r26, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <GSM_Response+0x4a>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <GSM_Response+0x50>
     4d4:	00 00       	nop
		{
			_delay_ms(2);
			timeout++;
     4d6:	bf ef       	ldi	r27, 0xFF	; 255
     4d8:	eb 1a       	sub	r14, r27
     4da:	fb 0a       	sbc	r15, r27
			if(Response_Length==strlen(buff))
     4dc:	d6 01       	movw	r26, r12
     4de:	0d 90       	ld	r0, X+
     4e0:	00 20       	and	r0, r0
     4e2:	e9 f7       	brne	.-6      	; 0x4de <GSM_Response+0x5a>
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	af 53       	subi	r26, 0x3F	; 63
     4e8:	b1 40       	sbci	r27, 0x01	; 1
     4ea:	ea 17       	cp	r30, r26
     4ec:	fb 07       	cpc	r31, r27
     4ee:	31 f5       	brne	.+76     	; 0x53c <GSM_Response+0xb8>
			{
				for(int i=0;i<Response_Length;i++)
     4f0:	1e 16       	cp	r1, r30
     4f2:	1f 06       	cpc	r1, r31
     4f4:	1c f5       	brge	.+70     	; 0x53c <GSM_Response+0xb8>
     4f6:	56 01       	movw	r10, r12
     4f8:	8f 01       	movw	r16, r30
     4fa:	01 5c       	subi	r16, 0xC1	; 193
     4fc:	1e 4f       	sbci	r17, 0xFE	; 254
     4fe:	86 2c       	mov	r8, r6
     500:	97 2c       	mov	r9, r7
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	89 83       	std	Y+1, r24	; 0x01
					CRLF_buff[1]=buff[i];
     506:	f5 01       	movw	r30, r10
     508:	81 91       	ld	r24, Z+
     50a:	5f 01       	movw	r10, r30
     50c:	8a 83       	std	Y+2, r24	; 0x02
					if(strncmp(CRLF_buff,"\r\n",2))
     50e:	42 e0       	ldi	r20, 0x02	; 2
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	61 ea       	ldi	r22, 0xA1	; 161
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 5a 05 	call	0xab4	; 0xab4 <strncmp>
     51e:	89 2b       	or	r24, r25
     520:	51 f0       	breq	.+20     	; 0x536 <GSM_Response+0xb2>
					{
						if(CRLF_Found++==2)				/* search for \r\n in string */
     522:	c4 01       	movw	r24, r8
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	8f 16       	cp	r8, r31
     52a:	91 04       	cpc	r9, r1
     52c:	19 f4       	brne	.+6      	; 0x534 <GSM_Response+0xb0>
						{
							GSM_Response_Display();		/* display response */
     52e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <GSM_Response_Display>
							return;
     532:	13 c0       	rjmp	.+38     	; 0x55a <GSM_Response+0xd6>
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
					CRLF_buff[1]=buff[i];
					if(strncmp(CRLF_buff,"\r\n",2))
					{
						if(CRLF_Found++==2)				/* search for \r\n in string */
     534:	4c 01       	movw	r8, r24
		{
			_delay_ms(2);
			timeout++;
			if(Response_Length==strlen(buff))
			{
				for(int i=0;i<Response_Length;i++)
     536:	a0 16       	cp	r10, r16
     538:	b1 06       	cpc	r11, r17
     53a:	19 f7       	brne	.-58     	; 0x502 <GSM_Response+0x7e>
     53c:	8f ec       	ldi	r24, 0xCF	; 207
     53e:	97 e0       	ldi	r25, 0x07	; 7
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <GSM_Response+0xbc>
     544:	00 c0       	rjmp	.+0      	; 0x546 <GSM_Response+0xc2>
     546:	00 00       	nop

			}
			
		}
		_delay_ms(1);
		timeout++;
     548:	9f ef       	ldi	r25, 0xFF	; 255
     54a:	e9 1a       	sub	r14, r25
     54c:	f9 0a       	sbc	r15, r25
	int CRLF_Found=0;
	char CRLF_buff[2];
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
     54e:	a0 e6       	ldi	r26, 0x60	; 96
     550:	ea 16       	cp	r14, r26
     552:	aa ee       	ldi	r26, 0xEA	; 234
     554:	fa 06       	cpc	r15, r26
     556:	08 f4       	brcc	.+2      	; 0x55a <GSM_Response+0xd6>
     558:	b0 cf       	rjmp	.-160    	; 0x4ba <GSM_Response+0x36>
		}
		_delay_ms(1);
		timeout++;
	}
	status_flag=0;
}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	bf 90       	pop	r11
     570:	af 90       	pop	r10
     572:	9f 90       	pop	r9
     574:	8f 90       	pop	r8
     576:	7f 90       	pop	r7
     578:	6f 90       	pop	r6
     57a:	08 95       	ret

0000057c <GSM_Begin>:
void GSM_Begin()
{

	while(1)
	{
		LCD_Command(0xc0);
     57c:	80 ec       	ldi	r24, 0xC0	; 192
     57e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		USART_SendString("ATE0\r");			/* send ATE0 to check module is ready or not */
     582:	84 ea       	ldi	r24, 0xA4	; 164
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_SendString>
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	84 e3       	ldi	r24, 0x34	; 52
     58e:	9c e0       	ldi	r25, 0x0C	; 12
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <GSM_Begin+0x14>
     598:	00 c0       	rjmp	.+0      	; 0x59a <GSM_Begin+0x1e>
     59a:	00 00       	nop
		_delay_ms(500);
		if(strstr(buff,"OK"))
     59c:	6a ea       	ldi	r22, 0xAA	; 170
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	8f e3       	ldi	r24, 0x3F	; 63
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 68 05 	call	0xad0	; 0xad0 <strstr>
     5a8:	89 2b       	or	r24, r25
     5aa:	69 f1       	breq	.+90     	; 0x606 <GSM_Begin+0x8a>
		{
			GSM_Response();                 /* get Response */
     5ac:	0e 94 42 02 	call	0x484	; 0x484 <GSM_Response>
			memset(buff,0,160);
     5b0:	80 ea       	ldi	r24, 0xA0	; 160
     5b2:	ef e3       	ldi	r30, 0x3F	; 63
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	df 01       	movw	r26, r30
     5b8:	1d 92       	st	X+, r1
     5ba:	8a 95       	dec	r24
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <GSM_Begin+0x3c>
     5be:	bf ef       	ldi	r27, 0xFF	; 255
     5c0:	29 e6       	ldi	r18, 0x69	; 105
     5c2:	88 e1       	ldi	r24, 0x18	; 24
     5c4:	b1 50       	subi	r27, 0x01	; 1
     5c6:	20 40       	sbci	r18, 0x00	; 0
     5c8:	80 40       	sbci	r24, 0x00	; 0
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <GSM_Begin+0x48>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <GSM_Begin+0x52>
     5ce:	00 00       	nop
			LCD_String("Error");
		}
	}
	_delay_ms(1000);

	LCD_Clear();
     5d0:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
	LCD_String_xy(1,0,"Text Mode");
     5d4:	4d ea       	ldi	r20, 0xAD	; 173
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
	LCD_Command(0xc0);
     5e0:	80 ec       	ldi	r24, 0xC0	; 192
     5e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	USART_SendString("AT+CMGF=1\r");/* select message format as text */
     5e6:	87 eb       	ldi	r24, 0xB7	; 183
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_SendString>
	GSM_Response();
     5ee:	0e 94 42 02 	call	0x484	; 0x484 <GSM_Response>
     5f2:	9f ef       	ldi	r25, 0xFF	; 255
     5f4:	a9 e6       	ldi	r26, 0x69	; 105
     5f6:	b8 e1       	ldi	r27, 0x18	; 24
     5f8:	91 50       	subi	r25, 0x01	; 1
     5fa:	a0 40       	sbci	r26, 0x00	; 0
     5fc:	b0 40       	sbci	r27, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <GSM_Begin+0x7c>
     600:	00 c0       	rjmp	.+0      	; 0x602 <GSM_Begin+0x86>
     602:	00 00       	nop
     604:	08 95       	ret
			memset(buff,0,160);
			break;
		}
		else
		{
			LCD_String("Error");
     606:	82 ec       	ldi	r24, 0xC2	; 194
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_String>
		}
	}
     60e:	b6 cf       	rjmp	.-148    	; 0x57c <GSM_Begin>

00000610 <GSM_Msg_Display>:
	USART_SendString(read_cmd);							/* read message at specified location/position */
	GSM_Msg_Display();									/* display message */
}

void GSM_Msg_Display()
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	2f ef       	ldi	r18, 0xFF	; 255
     61a:	84 e3       	ldi	r24, 0x34	; 52
     61c:	9c e0       	ldi	r25, 0x0C	; 12
     61e:	21 50       	subi	r18, 0x01	; 1
     620:	80 40       	sbci	r24, 0x00	; 0
     622:	90 40       	sbci	r25, 0x00	; 0
     624:	e1 f7       	brne	.-8      	; 0x61e <GSM_Msg_Display+0xe>
     626:	00 c0       	rjmp	.+0      	; 0x628 <GSM_Msg_Display+0x18>
     628:	00 00       	nop
	_delay_ms(500);
	if(!(strstr(buff,"+CMGR")))                         /*check for +CMGR response */
     62a:	68 ec       	ldi	r22, 0xC8	; 200
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	8f e3       	ldi	r24, 0x3F	; 63
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 68 05 	call	0xad0	; 0xad0 <strstr>
     636:	89 2b       	or	r24, r25
     638:	39 f4       	brne	.+14     	; 0x648 <GSM_Msg_Display+0x38>
	{
		LCD_String_xy(1,0,"No message");
     63a:	4e ec       	ldi	r20, 0xCE	; 206
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     646:	b9 c0       	rjmp	.+370    	; 0x7ba <GSM_Msg_Display+0x1aa>
	}
	else
	{
		buffer_pointer = 0;
     648:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     64c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
		
		while(1)
		{
			if(buff[buffer_pointer]=='\r' || buff[buffer_pointer]== 'n')  /*wait till \r\n not over*/
     650:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     654:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     658:	e1 5c       	subi	r30, 0xC1	; 193
     65a:	fe 4f       	sbci	r31, 0xFE	; 254
     65c:	80 81       	ld	r24, Z
     65e:	8d 30       	cpi	r24, 0x0D	; 13
     660:	99 f0       	breq	.+38     	; 0x688 <GSM_Msg_Display+0x78>
     662:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     666:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     66a:	e1 5c       	subi	r30, 0xC1	; 193
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	80 81       	ld	r24, Z
     670:	8e 36       	cpi	r24, 0x6E	; 110
     672:	51 f0       	breq	.+20     	; 0x688 <GSM_Msg_Display+0x78>
			else
			break;
		}
		
		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
     674:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     678:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     67c:	e1 5c       	subi	r30, 0xC1	; 193
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
     680:	80 81       	ld	r24, Z
     682:	8c 32       	cpi	r24, 0x2C	; 44
     684:	59 f4       	brne	.+22     	; 0x69c <GSM_Msg_Display+0x8c>
     686:	1c c0       	rjmp	.+56     	; 0x6c0 <GSM_Msg_Display+0xb0>
		
		while(1)
		{
			if(buff[buffer_pointer]=='\r' || buff[buffer_pointer]== 'n')  /*wait till \r\n not over*/
			{
				buffer_pointer++;
     688:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     68c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     696:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
			}
			else
			break;
		}
     69a:	da cf       	rjmp	.-76     	; 0x650 <GSM_Msg_Display+0x40>
		
		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
		{
			buffer_pointer++;
     69c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     6a0:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     6aa:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
			else
			break;
		}
		
		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
     6ae:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     6b2:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     6b6:	e1 5c       	subi	r30, 0xC1	; 193
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	80 81       	ld	r24, Z
     6bc:	8c 32       	cpi	r24, 0x2C	; 44
     6be:	71 f7       	brne	.-36     	; 0x69c <GSM_Msg_Display+0x8c>
		{
			buffer_pointer++;
		}
		buffer_pointer = buffer_pointer+2;
     6c0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     6c4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     6c8:	02 96       	adiw	r24, 0x02	; 2
     6ca:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     6ce:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
     6d2:	af ed       	ldi	r26, 0xDF	; 223
     6d4:	b1 e0       	ldi	r27, 0x01	; 1
     6d6:	2c ee       	ldi	r18, 0xEC	; 236
     6d8:	31 e0       	ldi	r19, 0x01	; 1

		/* extract mobile no. of message sender */
		for(int i=0;i<=12;i++)
		{
			Mobile_no[i] = buff[buffer_pointer];
     6da:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     6de:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     6e2:	e1 5c       	subi	r30, 0xC1	; 193
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	80 81       	ld	r24, Z
     6e8:	8d 93       	st	X+, r24
			buffer_pointer++;
     6ea:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     6ee:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     6f8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
			buffer_pointer++;
		}
		buffer_pointer = buffer_pointer+2;

		/* extract mobile no. of message sender */
		for(int i=0;i<=12;i++)
     6fc:	a2 17       	cp	r26, r18
     6fe:	b3 07       	cpc	r27, r19
     700:	61 f7       	brne	.-40     	; 0x6da <GSM_Msg_Display+0xca>
			buffer_pointer++;
		}
		
		do
		{
			buffer_pointer++;
     702:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     706:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     710:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
		}while(buff[buffer_pointer-1]!= '\n');
     714:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     718:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     71c:	e2 5c       	subi	r30, 0xC2	; 194
     71e:	fe 4f       	sbci	r31, 0xFE	; 254
     720:	80 81       	ld	r24, Z
     722:	8a 30       	cpi	r24, 0x0A	; 10
     724:	71 f7       	brne	.-36     	; 0x702 <GSM_Msg_Display+0xf2>
		
		LCD_Command(0xC0);
     726:	80 ec       	ldi	r24, 0xC0	; 192
     728:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     72c:	0d ee       	ldi	r16, 0xED	; 237
     72e:	11 e0       	ldi	r17, 0x01	; 1
		int i=0;
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	d0 e0       	ldi	r29, 0x00	; 0

		/* display and save message */
		while(buff[buffer_pointer]!= '\r' && i<31)
     734:	23 c0       	rjmp	.+70     	; 0x77c <GSM_Msg_Display+0x16c>
		{
				LCD_Char(buff[buffer_pointer]);
     736:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     73a:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     73e:	e1 5c       	subi	r30, 0xC1	; 193
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	80 81       	ld	r24, Z
     744:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Char>
				message_received[i]=buff[buffer_pointer];
     748:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     74c:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     750:	e1 5c       	subi	r30, 0xC1	; 193
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	80 81       	ld	r24, Z
     756:	f8 01       	movw	r30, r16
     758:	81 93       	st	Z+, r24
     75a:	8f 01       	movw	r16, r30
				
				buffer_pointer++;
     75c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buffer_pointer>
     760:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <buffer_pointer+0x1>
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <buffer_pointer+0x1>
     76a:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buffer_pointer>
				i++;
     76e:	21 96       	adiw	r28, 0x01	; 1
				if(i==16)
     770:	c0 31       	cpi	r28, 0x10	; 16
     772:	d1 05       	cpc	r29, r1
     774:	19 f4       	brne	.+6      	; 0x77c <GSM_Msg_Display+0x16c>
					LCD_Command(0x80);						/* display on 1st line */
     776:	80 e8       	ldi	r24, 0x80	; 128
     778:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		
		LCD_Command(0xC0);
		int i=0;

		/* display and save message */
		while(buff[buffer_pointer]!= '\r' && i<31)
     77c:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <buffer_pointer>
     780:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <buffer_pointer+0x1>
     784:	e1 5c       	subi	r30, 0xC1	; 193
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	80 81       	ld	r24, Z
     78a:	8d 30       	cpi	r24, 0x0D	; 13
     78c:	19 f0       	breq	.+6      	; 0x794 <GSM_Msg_Display+0x184>
     78e:	cf 31       	cpi	r28, 0x1F	; 31
     790:	d1 05       	cpc	r29, r1
     792:	89 f6       	brne	.-94     	; 0x736 <GSM_Msg_Display+0x126>
				i++;
				if(i==16)
					LCD_Command(0x80);						/* display on 1st line */
		}
		
		buffer_pointer = 0;
     794:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     798:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
		memset(buff,0,strlen(buff));
     79c:	ef e3       	ldi	r30, 0x3F	; 63
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	01 90       	ld	r0, Z+
     7a2:	00 20       	and	r0, r0
     7a4:	e9 f7       	brne	.-6      	; 0x7a0 <GSM_Msg_Display+0x190>
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	af 01       	movw	r20, r30
     7aa:	4f 53       	subi	r20, 0x3F	; 63
     7ac:	51 40       	sbci	r21, 0x01	; 1
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	8f e3       	ldi	r24, 0x3F	; 63
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <memset>
	}
	status_flag = 0;
     7ba:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <status_flag>
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <GSM_Msg_Read>:
	buffer_pointer=0;
	memset(buff,0,strlen(buff));
}

void GSM_Msg_Read(int position)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	2a 97       	sbiw	r28, 0x0a	; 10
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
	char read_cmd[10];
	sprintf(read_cmd,"AT+CMGR=%d\r",position);
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	89 ed       	ldi	r24, 0xD9	; 217
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	8e 01       	movw	r16, r28
     7ee:	0f 5f       	subi	r16, 0xFF	; 255
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
     7f2:	1f 93       	push	r17
     7f4:	0f 93       	push	r16
     7f6:	0e 94 8a 05 	call	0xb14	; 0xb14 <sprintf>
	USART_SendString(read_cmd);							/* read message at specified location/position */
     7fa:	c8 01       	movw	r24, r16
     7fc:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_SendString>
	GSM_Msg_Display();									/* display message */
     800:	0e 94 08 03 	call	0x610	; 0x610 <GSM_Msg_Display>
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
}
     810:	2a 96       	adiw	r28, 0x0a	; 10
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <main>:
int position = 0;							/* save location of current message */


int main(void)
{
	buffer_pointer = 0;
     826:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <buffer_pointer+0x1>
     82a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buffer_pointer>
	int is_msg_arrived;
	memset(message_received, 0, 60);
     82e:	8c e3       	ldi	r24, 0x3C	; 60
     830:	ed ee       	ldi	r30, 0xED	; 237
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	df 01       	movw	r26, r30
     836:	1d 92       	st	X+, r1
     838:	8a 95       	dec	r24
     83a:	e9 f7       	brne	.-6      	; 0x836 <main+0x10>
    LCD_Init();
     83c:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_Init>
	USART_Init(9600);						    /* initialize USART communication */
     840:	60 e8       	ldi	r22, 0x80	; 128
     842:	75 e2       	ldi	r23, 0x25	; 37
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <USART_Init>
	sei();
     84c:	78 94       	sei
	LCD_String_xy(1,0,"GSM Initializing");
     84e:	45 ee       	ldi	r20, 0xE5	; 229
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     85a:	bf ef       	ldi	r27, 0xFF	; 255
     85c:	2d e3       	ldi	r18, 0x3D	; 61
     85e:	39 e4       	ldi	r19, 0x49	; 73
     860:	b1 50       	subi	r27, 0x01	; 1
     862:	20 40       	sbci	r18, 0x00	; 0
     864:	30 40       	sbci	r19, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <__stack+0x1>
     868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
     86a:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
     86c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
	LCD_String_xy(1,0,"AT");
     870:	46 ef       	ldi	r20, 0xF6	; 246
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
	GSM_Begin();								/* check GSM responses and initialize GSM */
     87c:	0e 94 be 02 	call	0x57c	; 0x57c <GSM_Begin>
	LCD_Clear();	
     880:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				is_msg_arrived=0;
				status_flag=0;
				LCD_Clear();	
			}
		LCD_String_xy(1,0,"waiting for msg");
		memset(Mobile_no, 0, 14);
     884:	de e0       	ldi	r29, 0x0E	; 14
		memset(message_received, 0, 60);
     886:	cc e3       	ldi	r28, 0x3C	; 60
	LCD_Clear();	
	
	while (1){
		
		/*check if any new message received */
		if(status_flag==1){					
     888:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <status_flag>
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
     890:	74 c0       	rjmp	.+232    	; 0x97a <__stack+0x11b>
			is_msg_arrived = GSM_Wait_for_Msg();		/*check for message arrival*/
     892:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GSM_Wait_for_Msg>
			if(is_msg_arrived== true)
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <__stack+0x3d>
     89a:	6b c0       	rjmp	.+214    	; 0x972 <__stack+0x113>
			{
				LCD_Clear();
     89c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				LCD_String_xy(1,0,"new message");		/* new message arrived */
     8a0:	49 ef       	ldi	r20, 0xF9	; 249
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	99 e6       	ldi	r25, 0x69	; 105
     8b0:	a8 e1       	ldi	r26, 0x18	; 24
     8b2:	81 50       	subi	r24, 0x01	; 1
     8b4:	90 40       	sbci	r25, 0x00	; 0
     8b6:	a0 40       	sbci	r26, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__stack+0x53>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
     8bc:	00 00       	nop
				_delay_ms(1000);
				LCD_Clear();
     8be:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				GSM_Msg_Read(position);					/* read arrived message */		
     8c2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     8c6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
     8ca:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <GSM_Msg_Read>
     8ce:	bf ef       	ldi	r27, 0xFF	; 255
     8d0:	2d e3       	ldi	r18, 0x3D	; 61
     8d2:	39 e4       	ldi	r19, 0x49	; 73
     8d4:	b1 50       	subi	r27, 0x01	; 1
     8d6:	20 40       	sbci	r18, 0x00	; 0
     8d8:	30 40       	sbci	r19, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
     8de:	00 00       	nop
				_delay_ms(3000);
					
			/*check if received message is "call me" */
				if(strstr( message_received,"call me")){
     8e0:	65 e0       	ldi	r22, 0x05	; 5
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	8d ee       	ldi	r24, 0xED	; 237
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 68 05 	call	0xad0	; 0xad0 <strstr>
     8ec:	89 2b       	or	r24, r25
     8ee:	41 f1       	breq	.+80     	; 0x940 <__stack+0xe1>
					
					GSM_Calling(Mobile_no);				/* call sender of message */
     8f0:	8f ed       	ldi	r24, 0xDF	; 223
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 ae 01 	call	0x35c	; 0x35c <GSM_Calling>
					LCD_Clear();
     8f8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
					LCD_String_xy(1,0,"Calling...");
     8fc:	4d e0       	ldi	r20, 0x0D	; 13
     8fe:	51 e0       	ldi	r21, 0x01	; 1
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	9c e2       	ldi	r25, 0x2C	; 44
     90c:	a1 e3       	ldi	r26, 0x31	; 49
     90e:	b1 e0       	ldi	r27, 0x01	; 1
     910:	81 50       	subi	r24, 0x01	; 1
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	a0 40       	sbci	r26, 0x00	; 0
     916:	b0 40       	sbci	r27, 0x00	; 0
     918:	d9 f7       	brne	.-10     	; 0x910 <__stack+0xb1>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0xbd>
     91c:	00 00       	nop
					_delay_ms(15000);
					GSM_HangCall();						/* hang call */
     91e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <GSM_HangCall>
					LCD_String_xy(1,0,"Hang Call");
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	51 e0       	ldi	r21, 0x01	; 1
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     92e:	2f ef       	ldi	r18, 0xFF	; 255
     930:	39 e6       	ldi	r19, 0x69	; 105
     932:	88 e1       	ldi	r24, 0x18	; 24
     934:	21 50       	subi	r18, 0x01	; 1
     936:	30 40       	sbci	r19, 0x00	; 0
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
     93e:	00 00       	nop
					_delay_ms(1000);
				}
	
				LCD_Clear();
     940:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				GSM_Msg_Delete(position);				/* to save SIM memory delete current message */
     944:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     948:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
     94c:	0e 94 b1 00 	call	0x162	; 0x162 <GSM_Msg_Delete>
				LCD_String_xy(1,0,"Clear msg");
     950:	42 e2       	ldi	r20, 0x22	; 34
     952:	51 e0       	ldi	r21, 0x01	; 1
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
				GSM_Response();
     95c:	0e 94 42 02 	call	0x484	; 0x484 <GSM_Response>
     960:	9f ef       	ldi	r25, 0xFF	; 255
     962:	a9 e6       	ldi	r26, 0x69	; 105
     964:	b8 e1       	ldi	r27, 0x18	; 24
     966:	91 50       	subi	r25, 0x01	; 1
     968:	a0 40       	sbci	r26, 0x00	; 0
     96a:	b0 40       	sbci	r27, 0x00	; 0
     96c:	e1 f7       	brne	.-8      	; 0x966 <__stack+0x107>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <__stack+0x111>
     970:	00 00       	nop
			
			}
				
								
				is_msg_arrived=0;
				status_flag=0;
     972:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <status_flag>
				LCD_Clear();	
     976:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
			}
		LCD_String_xy(1,0,"waiting for msg");
     97a:	4c e2       	ldi	r20, 0x2C	; 44
     97c:	51 e0       	ldi	r21, 0x01	; 1
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
		memset(Mobile_no, 0, 14);
     986:	ef ed       	ldi	r30, 0xDF	; 223
     988:	f1 e0       	ldi	r31, 0x01	; 1
     98a:	df 01       	movw	r26, r30
     98c:	2d 2f       	mov	r18, r29
     98e:	1d 92       	st	X+, r1
     990:	2a 95       	dec	r18
     992:	e9 f7       	brne	.-6      	; 0x98e <__stack+0x12f>
		memset(message_received, 0, 60);
     994:	ed ee       	ldi	r30, 0xED	; 237
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	df 01       	movw	r26, r30
     99a:	2c 2f       	mov	r18, r28
     99c:	1d 92       	st	X+, r1
     99e:	2a 95       	dec	r18
     9a0:	e9 f7       	brne	.-6      	; 0x99c <__stack+0x13d>
		
		
	}
     9a2:	72 cf       	rjmp	.-284    	; 0x888 <__stack+0x29>

000009a4 <USART_Init>:
     9a4:	2a b1       	in	r18, 0x0a	; 10
     9a6:	28 69       	ori	r18, 0x98	; 152
     9a8:	2a b9       	out	0x0a, r18	; 10
     9aa:	20 b5       	in	r18, 0x20	; 32
     9ac:	26 68       	ori	r18, 0x86	; 134
     9ae:	20 bd       	out	0x20, r18	; 32
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	aa 1f       	adc	r26, r26
     9ba:	bb 1f       	adc	r27, r27
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	aa 1f       	adc	r26, r26
     9c2:	bb 1f       	adc	r27, r27
     9c4:	9c 01       	movw	r18, r24
     9c6:	ad 01       	movw	r20, r26
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	44 1f       	adc	r20, r20
     9ce:	55 1f       	adc	r21, r21
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	44 1f       	adc	r20, r20
     9d6:	55 1f       	adc	r21, r21
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	72 e1       	ldi	r23, 0x12	; 18
     9dc:	8a e7       	ldi	r24, 0x7A	; 122
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 13 05 	call	0xa26	; 0xa26 <__udivmodsi4>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	82 0f       	add	r24, r18
     9e8:	89 b9       	out	0x09, r24	; 9
     9ea:	da 01       	movw	r26, r20
     9ec:	c9 01       	movw	r24, r18
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	a1 09       	sbc	r26, r1
     9f2:	b1 09       	sbc	r27, r1
     9f4:	89 2f       	mov	r24, r25
     9f6:	9a 2f       	mov	r25, r26
     9f8:	ab 2f       	mov	r26, r27
     9fa:	bb 27       	eor	r27, r27
     9fc:	80 bd       	out	0x20, r24	; 32
     9fe:	08 95       	ret

00000a00 <USART_TxChar>:
     a00:	8c b9       	out	0x0c, r24	; 12
     a02:	5d 9b       	sbis	0x0b, 5	; 11
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <USART_TxChar+0x2>
     a06:	08 95       	ret

00000a08 <USART_SendString>:
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	ec 01       	movw	r28, r24
     a0e:	88 81       	ld	r24, Y
     a10:	88 23       	and	r24, r24
     a12:	31 f0       	breq	.+12     	; 0xa20 <USART_SendString+0x18>
     a14:	21 96       	adiw	r28, 0x01	; 1
     a16:	0e 94 00 05 	call	0xa00	; 0xa00 <USART_TxChar>
     a1a:	89 91       	ld	r24, Y+
     a1c:	81 11       	cpse	r24, r1
     a1e:	fb cf       	rjmp	.-10     	; 0xa16 <USART_SendString+0xe>
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <__udivmodsi4>:
     a26:	a1 e2       	ldi	r26, 0x21	; 33
     a28:	1a 2e       	mov	r1, r26
     a2a:	aa 1b       	sub	r26, r26
     a2c:	bb 1b       	sub	r27, r27
     a2e:	fd 01       	movw	r30, r26
     a30:	0d c0       	rjmp	.+26     	; 0xa4c <__udivmodsi4_ep>

00000a32 <__udivmodsi4_loop>:
     a32:	aa 1f       	adc	r26, r26
     a34:	bb 1f       	adc	r27, r27
     a36:	ee 1f       	adc	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	a2 17       	cp	r26, r18
     a3c:	b3 07       	cpc	r27, r19
     a3e:	e4 07       	cpc	r30, r20
     a40:	f5 07       	cpc	r31, r21
     a42:	20 f0       	brcs	.+8      	; 0xa4c <__udivmodsi4_ep>
     a44:	a2 1b       	sub	r26, r18
     a46:	b3 0b       	sbc	r27, r19
     a48:	e4 0b       	sbc	r30, r20
     a4a:	f5 0b       	sbc	r31, r21

00000a4c <__udivmodsi4_ep>:
     a4c:	66 1f       	adc	r22, r22
     a4e:	77 1f       	adc	r23, r23
     a50:	88 1f       	adc	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	1a 94       	dec	r1
     a56:	69 f7       	brne	.-38     	; 0xa32 <__udivmodsi4_loop>
     a58:	60 95       	com	r22
     a5a:	70 95       	com	r23
     a5c:	80 95       	com	r24
     a5e:	90 95       	com	r25
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	bd 01       	movw	r22, r26
     a66:	cf 01       	movw	r24, r30
     a68:	08 95       	ret

00000a6a <atoi>:
     a6a:	fc 01       	movw	r30, r24
     a6c:	88 27       	eor	r24, r24
     a6e:	99 27       	eor	r25, r25
     a70:	e8 94       	clt
     a72:	21 91       	ld	r18, Z+
     a74:	20 32       	cpi	r18, 0x20	; 32
     a76:	e9 f3       	breq	.-6      	; 0xa72 <atoi+0x8>
     a78:	29 30       	cpi	r18, 0x09	; 9
     a7a:	10 f0       	brcs	.+4      	; 0xa80 <atoi+0x16>
     a7c:	2e 30       	cpi	r18, 0x0E	; 14
     a7e:	c8 f3       	brcs	.-14     	; 0xa72 <atoi+0x8>
     a80:	2b 32       	cpi	r18, 0x2B	; 43
     a82:	41 f0       	breq	.+16     	; 0xa94 <atoi+0x2a>
     a84:	2d 32       	cpi	r18, 0x2D	; 45
     a86:	39 f4       	brne	.+14     	; 0xa96 <atoi+0x2c>
     a88:	68 94       	set
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <atoi+0x2a>
     a8c:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulhi_const_10>
     a90:	82 0f       	add	r24, r18
     a92:	91 1d       	adc	r25, r1
     a94:	21 91       	ld	r18, Z+
     a96:	20 53       	subi	r18, 0x30	; 48
     a98:	2a 30       	cpi	r18, 0x0A	; 10
     a9a:	c0 f3       	brcs	.-16     	; 0xa8c <atoi+0x22>
     a9c:	1e f4       	brtc	.+6      	; 0xaa4 <atoi+0x3a>
     a9e:	90 95       	com	r25
     aa0:	81 95       	neg	r24
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	08 95       	ret

00000aa6 <memset>:
     aa6:	dc 01       	movw	r26, r24
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <memset+0x6>
     aaa:	6d 93       	st	X+, r22
     aac:	41 50       	subi	r20, 0x01	; 1
     aae:	50 40       	sbci	r21, 0x00	; 0
     ab0:	e0 f7       	brcc	.-8      	; 0xaaa <memset+0x4>
     ab2:	08 95       	ret

00000ab4 <strncmp>:
     ab4:	fb 01       	movw	r30, r22
     ab6:	dc 01       	movw	r26, r24
     ab8:	41 50       	subi	r20, 0x01	; 1
     aba:	50 40       	sbci	r21, 0x00	; 0
     abc:	30 f0       	brcs	.+12     	; 0xaca <strncmp+0x16>
     abe:	8d 91       	ld	r24, X+
     ac0:	01 90       	ld	r0, Z+
     ac2:	80 19       	sub	r24, r0
     ac4:	19 f4       	brne	.+6      	; 0xacc <strncmp+0x18>
     ac6:	00 20       	and	r0, r0
     ac8:	b9 f7       	brne	.-18     	; 0xab8 <strncmp+0x4>
     aca:	88 1b       	sub	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	08 95       	ret

00000ad0 <strstr>:
     ad0:	fb 01       	movw	r30, r22
     ad2:	51 91       	ld	r21, Z+
     ad4:	55 23       	and	r21, r21
     ad6:	a9 f0       	breq	.+42     	; 0xb02 <strstr+0x32>
     ad8:	bf 01       	movw	r22, r30
     ada:	dc 01       	movw	r26, r24
     adc:	4d 91       	ld	r20, X+
     ade:	45 17       	cp	r20, r21
     ae0:	41 11       	cpse	r20, r1
     ae2:	e1 f7       	brne	.-8      	; 0xadc <strstr+0xc>
     ae4:	59 f4       	brne	.+22     	; 0xafc <strstr+0x2c>
     ae6:	cd 01       	movw	r24, r26
     ae8:	01 90       	ld	r0, Z+
     aea:	00 20       	and	r0, r0
     aec:	49 f0       	breq	.+18     	; 0xb00 <strstr+0x30>
     aee:	4d 91       	ld	r20, X+
     af0:	40 15       	cp	r20, r0
     af2:	41 11       	cpse	r20, r1
     af4:	c9 f3       	breq	.-14     	; 0xae8 <strstr+0x18>
     af6:	fb 01       	movw	r30, r22
     af8:	41 11       	cpse	r20, r1
     afa:	ef cf       	rjmp	.-34     	; 0xada <strstr+0xa>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	08 95       	ret

00000b04 <__mulhi_const_10>:
     b04:	7a e0       	ldi	r23, 0x0A	; 10
     b06:	97 9f       	mul	r25, r23
     b08:	90 2d       	mov	r25, r0
     b0a:	87 9f       	mul	r24, r23
     b0c:	80 2d       	mov	r24, r0
     b0e:	91 0d       	add	r25, r1
     b10:	11 24       	eor	r1, r1
     b12:	08 95       	ret

00000b14 <sprintf>:
     b14:	ae e0       	ldi	r26, 0x0E	; 14
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e0 e9       	ldi	r30, 0x90	; 144
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
     b1c:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__prologue_saves__+0x1c>
     b20:	0d 89       	ldd	r16, Y+21	; 0x15
     b22:	1e 89       	ldd	r17, Y+22	; 0x16
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	8c 83       	std	Y+4, r24	; 0x04
     b28:	1a 83       	std	Y+2, r17	; 0x02
     b2a:	09 83       	std	Y+1, r16	; 0x01
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f e7       	ldi	r25, 0x7F	; 127
     b30:	9e 83       	std	Y+6, r25	; 0x06
     b32:	8d 83       	std	Y+5, r24	; 0x05
     b34:	ae 01       	movw	r20, r28
     b36:	47 5e       	subi	r20, 0xE7	; 231
     b38:	5f 4f       	sbci	r21, 0xFF	; 255
     b3a:	6f 89       	ldd	r22, Y+23	; 0x17
     b3c:	78 8d       	ldd	r23, Y+24	; 0x18
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	0e 94 ad 05 	call	0xb5a	; 0xb5a <vfprintf>
     b46:	2f 81       	ldd	r18, Y+7	; 0x07
     b48:	38 85       	ldd	r19, Y+8	; 0x08
     b4a:	f8 01       	movw	r30, r16
     b4c:	e2 0f       	add	r30, r18
     b4e:	f3 1f       	adc	r31, r19
     b50:	10 82       	st	Z, r1
     b52:	2e 96       	adiw	r28, 0x0e	; 14
     b54:	e4 e0       	ldi	r30, 0x04	; 4
     b56:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__epilogue_restores__+0x1c>

00000b5a <vfprintf>:
     b5a:	ac e0       	ldi	r26, 0x0C	; 12
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e3 eb       	ldi	r30, 0xB3	; 179
     b60:	f5 e0       	ldi	r31, 0x05	; 5
     b62:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__prologue_saves__>
     b66:	7c 01       	movw	r14, r24
     b68:	6b 01       	movw	r12, r22
     b6a:	8a 01       	movw	r16, r20
     b6c:	fc 01       	movw	r30, r24
     b6e:	17 82       	std	Z+7, r1	; 0x07
     b70:	16 82       	std	Z+6, r1	; 0x06
     b72:	83 81       	ldd	r24, Z+3	; 0x03
     b74:	81 ff       	sbrs	r24, 1
     b76:	bd c1       	rjmp	.+890    	; 0xef2 <vfprintf+0x398>
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	4c 01       	movw	r8, r24
     b7e:	f7 01       	movw	r30, r14
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	f6 01       	movw	r30, r12
     b84:	93 fd       	sbrc	r25, 3
     b86:	85 91       	lpm	r24, Z+
     b88:	93 ff       	sbrs	r25, 3
     b8a:	81 91       	ld	r24, Z+
     b8c:	6f 01       	movw	r12, r30
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <vfprintf+0x3a>
     b92:	ab c1       	rjmp	.+854    	; 0xeea <vfprintf+0x390>
     b94:	85 32       	cpi	r24, 0x25	; 37
     b96:	39 f4       	brne	.+14     	; 0xba6 <vfprintf+0x4c>
     b98:	93 fd       	sbrc	r25, 3
     b9a:	85 91       	lpm	r24, Z+
     b9c:	93 ff       	sbrs	r25, 3
     b9e:	81 91       	ld	r24, Z+
     ba0:	6f 01       	movw	r12, r30
     ba2:	85 32       	cpi	r24, 0x25	; 37
     ba4:	29 f4       	brne	.+10     	; 0xbb0 <vfprintf+0x56>
     ba6:	b7 01       	movw	r22, r14
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     bae:	e7 cf       	rjmp	.-50     	; 0xb7e <vfprintf+0x24>
     bb0:	51 2c       	mov	r5, r1
     bb2:	31 2c       	mov	r3, r1
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	20 32       	cpi	r18, 0x20	; 32
     bb8:	a0 f4       	brcc	.+40     	; 0xbe2 <vfprintf+0x88>
     bba:	8b 32       	cpi	r24, 0x2B	; 43
     bbc:	69 f0       	breq	.+26     	; 0xbd8 <vfprintf+0x7e>
     bbe:	30 f4       	brcc	.+12     	; 0xbcc <vfprintf+0x72>
     bc0:	80 32       	cpi	r24, 0x20	; 32
     bc2:	59 f0       	breq	.+22     	; 0xbda <vfprintf+0x80>
     bc4:	83 32       	cpi	r24, 0x23	; 35
     bc6:	69 f4       	brne	.+26     	; 0xbe2 <vfprintf+0x88>
     bc8:	20 61       	ori	r18, 0x10	; 16
     bca:	2c c0       	rjmp	.+88     	; 0xc24 <vfprintf+0xca>
     bcc:	8d 32       	cpi	r24, 0x2D	; 45
     bce:	39 f0       	breq	.+14     	; 0xbde <vfprintf+0x84>
     bd0:	80 33       	cpi	r24, 0x30	; 48
     bd2:	39 f4       	brne	.+14     	; 0xbe2 <vfprintf+0x88>
     bd4:	21 60       	ori	r18, 0x01	; 1
     bd6:	26 c0       	rjmp	.+76     	; 0xc24 <vfprintf+0xca>
     bd8:	22 60       	ori	r18, 0x02	; 2
     bda:	24 60       	ori	r18, 0x04	; 4
     bdc:	23 c0       	rjmp	.+70     	; 0xc24 <vfprintf+0xca>
     bde:	28 60       	ori	r18, 0x08	; 8
     be0:	21 c0       	rjmp	.+66     	; 0xc24 <vfprintf+0xca>
     be2:	27 fd       	sbrc	r18, 7
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <vfprintf+0xda>
     be6:	30 ed       	ldi	r19, 0xD0	; 208
     be8:	38 0f       	add	r19, r24
     bea:	3a 30       	cpi	r19, 0x0A	; 10
     bec:	78 f4       	brcc	.+30     	; 0xc0c <vfprintf+0xb2>
     bee:	26 ff       	sbrs	r18, 6
     bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0xa4>
     bf2:	fa e0       	ldi	r31, 0x0A	; 10
     bf4:	5f 9e       	mul	r5, r31
     bf6:	30 0d       	add	r19, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	53 2e       	mov	r5, r19
     bfc:	13 c0       	rjmp	.+38     	; 0xc24 <vfprintf+0xca>
     bfe:	8a e0       	ldi	r24, 0x0A	; 10
     c00:	38 9e       	mul	r3, r24
     c02:	30 0d       	add	r19, r0
     c04:	11 24       	eor	r1, r1
     c06:	33 2e       	mov	r3, r19
     c08:	20 62       	ori	r18, 0x20	; 32
     c0a:	0c c0       	rjmp	.+24     	; 0xc24 <vfprintf+0xca>
     c0c:	8e 32       	cpi	r24, 0x2E	; 46
     c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0xbe>
     c10:	26 fd       	sbrc	r18, 6
     c12:	6b c1       	rjmp	.+726    	; 0xeea <vfprintf+0x390>
     c14:	20 64       	ori	r18, 0x40	; 64
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0xca>
     c18:	8c 36       	cpi	r24, 0x6C	; 108
     c1a:	11 f4       	brne	.+4      	; 0xc20 <vfprintf+0xc6>
     c1c:	20 68       	ori	r18, 0x80	; 128
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0xca>
     c20:	88 36       	cpi	r24, 0x68	; 104
     c22:	41 f4       	brne	.+16     	; 0xc34 <vfprintf+0xda>
     c24:	f6 01       	movw	r30, r12
     c26:	93 fd       	sbrc	r25, 3
     c28:	85 91       	lpm	r24, Z+
     c2a:	93 ff       	sbrs	r25, 3
     c2c:	81 91       	ld	r24, Z+
     c2e:	6f 01       	movw	r12, r30
     c30:	81 11       	cpse	r24, r1
     c32:	c1 cf       	rjmp	.-126    	; 0xbb6 <vfprintf+0x5c>
     c34:	98 2f       	mov	r25, r24
     c36:	9f 7d       	andi	r25, 0xDF	; 223
     c38:	95 54       	subi	r25, 0x45	; 69
     c3a:	93 30       	cpi	r25, 0x03	; 3
     c3c:	28 f4       	brcc	.+10     	; 0xc48 <vfprintf+0xee>
     c3e:	0c 5f       	subi	r16, 0xFC	; 252
     c40:	1f 4f       	sbci	r17, 0xFF	; 255
     c42:	ff e3       	ldi	r31, 0x3F	; 63
     c44:	f9 83       	std	Y+1, r31	; 0x01
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <vfprintf+0x108>
     c48:	83 36       	cpi	r24, 0x63	; 99
     c4a:	31 f0       	breq	.+12     	; 0xc58 <vfprintf+0xfe>
     c4c:	83 37       	cpi	r24, 0x73	; 115
     c4e:	71 f0       	breq	.+28     	; 0xc6c <vfprintf+0x112>
     c50:	83 35       	cpi	r24, 0x53	; 83
     c52:	09 f0       	breq	.+2      	; 0xc56 <vfprintf+0xfc>
     c54:	5b c0       	rjmp	.+182    	; 0xd0c <vfprintf+0x1b2>
     c56:	22 c0       	rjmp	.+68     	; 0xc9c <vfprintf+0x142>
     c58:	f8 01       	movw	r30, r16
     c5a:	80 81       	ld	r24, Z
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	0e 5f       	subi	r16, 0xFE	; 254
     c60:	1f 4f       	sbci	r17, 0xFF	; 255
     c62:	44 24       	eor	r4, r4
     c64:	43 94       	inc	r4
     c66:	51 2c       	mov	r5, r1
     c68:	54 01       	movw	r10, r8
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <vfprintf+0x13c>
     c6c:	38 01       	movw	r6, r16
     c6e:	f2 e0       	ldi	r31, 0x02	; 2
     c70:	6f 0e       	add	r6, r31
     c72:	71 1c       	adc	r7, r1
     c74:	f8 01       	movw	r30, r16
     c76:	a0 80       	ld	r10, Z
     c78:	b1 80       	ldd	r11, Z+1	; 0x01
     c7a:	26 ff       	sbrs	r18, 6
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <vfprintf+0x12a>
     c7e:	65 2d       	mov	r22, r5
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x12e>
     c84:	6f ef       	ldi	r22, 0xFF	; 255
     c86:	7f ef       	ldi	r23, 0xFF	; 255
     c88:	c5 01       	movw	r24, r10
     c8a:	2c 87       	std	Y+12, r18	; 0x0c
     c8c:	0e 94 8a 07 	call	0xf14	; 0xf14 <strnlen>
     c90:	2c 01       	movw	r4, r24
     c92:	83 01       	movw	r16, r6
     c94:	2c 85       	ldd	r18, Y+12	; 0x0c
     c96:	2f 77       	andi	r18, 0x7F	; 127
     c98:	22 2e       	mov	r2, r18
     c9a:	17 c0       	rjmp	.+46     	; 0xcca <vfprintf+0x170>
     c9c:	38 01       	movw	r6, r16
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	6f 0e       	add	r6, r31
     ca2:	71 1c       	adc	r7, r1
     ca4:	f8 01       	movw	r30, r16
     ca6:	a0 80       	ld	r10, Z
     ca8:	b1 80       	ldd	r11, Z+1	; 0x01
     caa:	26 ff       	sbrs	r18, 6
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <vfprintf+0x15a>
     cae:	65 2d       	mov	r22, r5
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x15e>
     cb4:	6f ef       	ldi	r22, 0xFF	; 255
     cb6:	7f ef       	ldi	r23, 0xFF	; 255
     cb8:	c5 01       	movw	r24, r10
     cba:	2c 87       	std	Y+12, r18	; 0x0c
     cbc:	0e 94 7f 07 	call	0xefe	; 0xefe <strnlen_P>
     cc0:	2c 01       	movw	r4, r24
     cc2:	2c 85       	ldd	r18, Y+12	; 0x0c
     cc4:	20 68       	ori	r18, 0x80	; 128
     cc6:	22 2e       	mov	r2, r18
     cc8:	83 01       	movw	r16, r6
     cca:	23 fc       	sbrc	r2, 3
     ccc:	1b c0       	rjmp	.+54     	; 0xd04 <vfprintf+0x1aa>
     cce:	83 2d       	mov	r24, r3
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	48 16       	cp	r4, r24
     cd4:	59 06       	cpc	r5, r25
     cd6:	b0 f4       	brcc	.+44     	; 0xd04 <vfprintf+0x1aa>
     cd8:	b7 01       	movw	r22, r14
     cda:	80 e2       	ldi	r24, 0x20	; 32
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     ce2:	3a 94       	dec	r3
     ce4:	f4 cf       	rjmp	.-24     	; 0xcce <vfprintf+0x174>
     ce6:	f5 01       	movw	r30, r10
     ce8:	27 fc       	sbrc	r2, 7
     cea:	85 91       	lpm	r24, Z+
     cec:	27 fe       	sbrs	r2, 7
     cee:	81 91       	ld	r24, Z+
     cf0:	5f 01       	movw	r10, r30
     cf2:	b7 01       	movw	r22, r14
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     cfa:	31 10       	cpse	r3, r1
     cfc:	3a 94       	dec	r3
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	4f 1a       	sub	r4, r31
     d02:	51 08       	sbc	r5, r1
     d04:	41 14       	cp	r4, r1
     d06:	51 04       	cpc	r5, r1
     d08:	71 f7       	brne	.-36     	; 0xce6 <vfprintf+0x18c>
     d0a:	e5 c0       	rjmp	.+458    	; 0xed6 <vfprintf+0x37c>
     d0c:	84 36       	cpi	r24, 0x64	; 100
     d0e:	11 f0       	breq	.+4      	; 0xd14 <vfprintf+0x1ba>
     d10:	89 36       	cpi	r24, 0x69	; 105
     d12:	39 f5       	brne	.+78     	; 0xd62 <vfprintf+0x208>
     d14:	f8 01       	movw	r30, r16
     d16:	27 ff       	sbrs	r18, 7
     d18:	07 c0       	rjmp	.+14     	; 0xd28 <vfprintf+0x1ce>
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	0c 5f       	subi	r16, 0xFC	; 252
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <vfprintf+0x1de>
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	07 2e       	mov	r0, r23
     d2e:	00 0c       	add	r0, r0
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 5f       	subi	r16, 0xFE	; 254
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	2f 76       	andi	r18, 0x6F	; 111
     d3a:	72 2e       	mov	r7, r18
     d3c:	97 ff       	sbrs	r25, 7
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <vfprintf+0x1f8>
     d40:	90 95       	com	r25
     d42:	80 95       	com	r24
     d44:	70 95       	com	r23
     d46:	61 95       	neg	r22
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	8f 4f       	sbci	r24, 0xFF	; 255
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	20 68       	ori	r18, 0x80	; 128
     d50:	72 2e       	mov	r7, r18
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	a4 01       	movw	r20, r8
     d58:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__ultoa_invert>
     d5c:	a8 2e       	mov	r10, r24
     d5e:	a8 18       	sub	r10, r8
     d60:	44 c0       	rjmp	.+136    	; 0xdea <vfprintf+0x290>
     d62:	85 37       	cpi	r24, 0x75	; 117
     d64:	29 f4       	brne	.+10     	; 0xd70 <vfprintf+0x216>
     d66:	2f 7e       	andi	r18, 0xEF	; 239
     d68:	b2 2e       	mov	r11, r18
     d6a:	2a e0       	ldi	r18, 0x0A	; 10
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	25 c0       	rjmp	.+74     	; 0xdba <vfprintf+0x260>
     d70:	f2 2f       	mov	r31, r18
     d72:	f9 7f       	andi	r31, 0xF9	; 249
     d74:	bf 2e       	mov	r11, r31
     d76:	8f 36       	cpi	r24, 0x6F	; 111
     d78:	c1 f0       	breq	.+48     	; 0xdaa <vfprintf+0x250>
     d7a:	18 f4       	brcc	.+6      	; 0xd82 <vfprintf+0x228>
     d7c:	88 35       	cpi	r24, 0x58	; 88
     d7e:	79 f0       	breq	.+30     	; 0xd9e <vfprintf+0x244>
     d80:	b4 c0       	rjmp	.+360    	; 0xeea <vfprintf+0x390>
     d82:	80 37       	cpi	r24, 0x70	; 112
     d84:	19 f0       	breq	.+6      	; 0xd8c <vfprintf+0x232>
     d86:	88 37       	cpi	r24, 0x78	; 120
     d88:	21 f0       	breq	.+8      	; 0xd92 <vfprintf+0x238>
     d8a:	af c0       	rjmp	.+350    	; 0xeea <vfprintf+0x390>
     d8c:	2f 2f       	mov	r18, r31
     d8e:	20 61       	ori	r18, 0x10	; 16
     d90:	b2 2e       	mov	r11, r18
     d92:	b4 fe       	sbrs	r11, 4
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <vfprintf+0x256>
     d96:	8b 2d       	mov	r24, r11
     d98:	84 60       	ori	r24, 0x04	; 4
     d9a:	b8 2e       	mov	r11, r24
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <vfprintf+0x256>
     d9e:	24 ff       	sbrs	r18, 4
     da0:	0a c0       	rjmp	.+20     	; 0xdb6 <vfprintf+0x25c>
     da2:	9f 2f       	mov	r25, r31
     da4:	96 60       	ori	r25, 0x06	; 6
     da6:	b9 2e       	mov	r11, r25
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <vfprintf+0x25c>
     daa:	28 e0       	ldi	r18, 0x08	; 8
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	05 c0       	rjmp	.+10     	; 0xdba <vfprintf+0x260>
     db0:	20 e1       	ldi	r18, 0x10	; 16
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x260>
     db6:	20 e1       	ldi	r18, 0x10	; 16
     db8:	32 e0       	ldi	r19, 0x02	; 2
     dba:	f8 01       	movw	r30, r16
     dbc:	b7 fe       	sbrs	r11, 7
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <vfprintf+0x274>
     dc0:	60 81       	ld	r22, Z
     dc2:	71 81       	ldd	r23, Z+1	; 0x01
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	0c 5f       	subi	r16, 0xFC	; 252
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <vfprintf+0x280>
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 5f       	subi	r16, 0xFE	; 254
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	a4 01       	movw	r20, r8
     ddc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__ultoa_invert>
     de0:	a8 2e       	mov	r10, r24
     de2:	a8 18       	sub	r10, r8
     de4:	fb 2d       	mov	r31, r11
     de6:	ff 77       	andi	r31, 0x7F	; 127
     de8:	7f 2e       	mov	r7, r31
     dea:	76 fe       	sbrs	r7, 6
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <vfprintf+0x2aa>
     dee:	37 2d       	mov	r19, r7
     df0:	3e 7f       	andi	r19, 0xFE	; 254
     df2:	a5 14       	cp	r10, r5
     df4:	50 f4       	brcc	.+20     	; 0xe0a <vfprintf+0x2b0>
     df6:	74 fe       	sbrs	r7, 4
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <vfprintf+0x2b4>
     dfa:	72 fc       	sbrc	r7, 2
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <vfprintf+0x2b4>
     dfe:	37 2d       	mov	r19, r7
     e00:	3e 7e       	andi	r19, 0xEE	; 238
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <vfprintf+0x2b4>
     e04:	ba 2c       	mov	r11, r10
     e06:	37 2d       	mov	r19, r7
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <vfprintf+0x2b6>
     e0a:	ba 2c       	mov	r11, r10
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <vfprintf+0x2b6>
     e0e:	b5 2c       	mov	r11, r5
     e10:	34 ff       	sbrs	r19, 4
     e12:	0d c0       	rjmp	.+26     	; 0xe2e <vfprintf+0x2d4>
     e14:	fe 01       	movw	r30, r28
     e16:	ea 0d       	add	r30, r10
     e18:	f1 1d       	adc	r31, r1
     e1a:	80 81       	ld	r24, Z
     e1c:	80 33       	cpi	r24, 0x30	; 48
     e1e:	11 f4       	brne	.+4      	; 0xe24 <vfprintf+0x2ca>
     e20:	39 7e       	andi	r19, 0xE9	; 233
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x2dc>
     e24:	32 ff       	sbrs	r19, 2
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <vfprintf+0x2da>
     e28:	b3 94       	inc	r11
     e2a:	b3 94       	inc	r11
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <vfprintf+0x2dc>
     e2e:	83 2f       	mov	r24, r19
     e30:	86 78       	andi	r24, 0x86	; 134
     e32:	09 f0       	breq	.+2      	; 0xe36 <vfprintf+0x2dc>
     e34:	b3 94       	inc	r11
     e36:	33 fd       	sbrc	r19, 3
     e38:	13 c0       	rjmp	.+38     	; 0xe60 <vfprintf+0x306>
     e3a:	30 ff       	sbrs	r19, 0
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <vfprintf+0x2f0>
     e3e:	5a 2c       	mov	r5, r10
     e40:	b3 14       	cp	r11, r3
     e42:	18 f4       	brcc	.+6      	; 0xe4a <vfprintf+0x2f0>
     e44:	53 0c       	add	r5, r3
     e46:	5b 18       	sub	r5, r11
     e48:	b3 2c       	mov	r11, r3
     e4a:	b3 14       	cp	r11, r3
     e4c:	68 f4       	brcc	.+26     	; 0xe68 <vfprintf+0x30e>
     e4e:	b7 01       	movw	r22, r14
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	3c 87       	std	Y+12, r19	; 0x0c
     e56:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     e5a:	b3 94       	inc	r11
     e5c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e5e:	f5 cf       	rjmp	.-22     	; 0xe4a <vfprintf+0x2f0>
     e60:	b3 14       	cp	r11, r3
     e62:	10 f4       	brcc	.+4      	; 0xe68 <vfprintf+0x30e>
     e64:	3b 18       	sub	r3, r11
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <vfprintf+0x310>
     e68:	31 2c       	mov	r3, r1
     e6a:	34 ff       	sbrs	r19, 4
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <vfprintf+0x338>
     e6e:	b7 01       	movw	r22, r14
     e70:	80 e3       	ldi	r24, 0x30	; 48
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	3c 87       	std	Y+12, r19	; 0x0c
     e76:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     e7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e7c:	32 ff       	sbrs	r19, 2
     e7e:	17 c0       	rjmp	.+46     	; 0xeae <vfprintf+0x354>
     e80:	31 fd       	sbrc	r19, 1
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <vfprintf+0x330>
     e84:	88 e7       	ldi	r24, 0x78	; 120
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x334>
     e8a:	88 e5       	ldi	r24, 0x58	; 88
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	b7 01       	movw	r22, r14
     e90:	0c c0       	rjmp	.+24     	; 0xeaa <vfprintf+0x350>
     e92:	83 2f       	mov	r24, r19
     e94:	86 78       	andi	r24, 0x86	; 134
     e96:	59 f0       	breq	.+22     	; 0xeae <vfprintf+0x354>
     e98:	31 ff       	sbrs	r19, 1
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x346>
     e9c:	8b e2       	ldi	r24, 0x2B	; 43
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <vfprintf+0x348>
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	37 fd       	sbrc	r19, 7
     ea4:	8d e2       	ldi	r24, 0x2D	; 45
     ea6:	b7 01       	movw	r22, r14
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     eae:	a5 14       	cp	r10, r5
     eb0:	38 f4       	brcc	.+14     	; 0xec0 <vfprintf+0x366>
     eb2:	b7 01       	movw	r22, r14
     eb4:	80 e3       	ldi	r24, 0x30	; 48
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     ebc:	5a 94       	dec	r5
     ebe:	f7 cf       	rjmp	.-18     	; 0xeae <vfprintf+0x354>
     ec0:	aa 94       	dec	r10
     ec2:	f4 01       	movw	r30, r8
     ec4:	ea 0d       	add	r30, r10
     ec6:	f1 1d       	adc	r31, r1
     ec8:	80 81       	ld	r24, Z
     eca:	b7 01       	movw	r22, r14
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     ed2:	a1 10       	cpse	r10, r1
     ed4:	f5 cf       	rjmp	.-22     	; 0xec0 <vfprintf+0x366>
     ed6:	33 20       	and	r3, r3
     ed8:	09 f4       	brne	.+2      	; 0xedc <vfprintf+0x382>
     eda:	51 ce       	rjmp	.-862    	; 0xb7e <vfprintf+0x24>
     edc:	b7 01       	movw	r22, r14
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 95 07 	call	0xf2a	; 0xf2a <fputc>
     ee6:	3a 94       	dec	r3
     ee8:	f6 cf       	rjmp	.-20     	; 0xed6 <vfprintf+0x37c>
     eea:	f7 01       	movw	r30, r14
     eec:	86 81       	ldd	r24, Z+6	; 0x06
     eee:	97 81       	ldd	r25, Z+7	; 0x07
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x39c>
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	2c 96       	adiw	r28, 0x0c	; 12
     ef8:	e2 e1       	ldi	r30, 0x12	; 18
     efa:	0c 94 47 08 	jmp	0x108e	; 0x108e <__epilogue_restores__>

00000efe <strnlen_P>:
     efe:	fc 01       	movw	r30, r24
     f00:	05 90       	lpm	r0, Z+
     f02:	61 50       	subi	r22, 0x01	; 1
     f04:	70 40       	sbci	r23, 0x00	; 0
     f06:	01 10       	cpse	r0, r1
     f08:	d8 f7       	brcc	.-10     	; 0xf00 <strnlen_P+0x2>
     f0a:	80 95       	com	r24
     f0c:	90 95       	com	r25
     f0e:	8e 0f       	add	r24, r30
     f10:	9f 1f       	adc	r25, r31
     f12:	08 95       	ret

00000f14 <strnlen>:
     f14:	fc 01       	movw	r30, r24
     f16:	61 50       	subi	r22, 0x01	; 1
     f18:	70 40       	sbci	r23, 0x00	; 0
     f1a:	01 90       	ld	r0, Z+
     f1c:	01 10       	cpse	r0, r1
     f1e:	d8 f7       	brcc	.-10     	; 0xf16 <strnlen+0x2>
     f20:	80 95       	com	r24
     f22:	90 95       	com	r25
     f24:	8e 0f       	add	r24, r30
     f26:	9f 1f       	adc	r25, r31
     f28:	08 95       	ret

00000f2a <fputc>:
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	fb 01       	movw	r30, r22
     f34:	23 81       	ldd	r18, Z+3	; 0x03
     f36:	21 fd       	sbrc	r18, 1
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <fputc+0x16>
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	9f ef       	ldi	r25, 0xFF	; 255
     f3e:	28 c0       	rjmp	.+80     	; 0xf90 <fputc+0x66>
     f40:	22 ff       	sbrs	r18, 2
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <fputc+0x46>
     f44:	46 81       	ldd	r20, Z+6	; 0x06
     f46:	57 81       	ldd	r21, Z+7	; 0x07
     f48:	24 81       	ldd	r18, Z+4	; 0x04
     f4a:	35 81       	ldd	r19, Z+5	; 0x05
     f4c:	42 17       	cp	r20, r18
     f4e:	53 07       	cpc	r21, r19
     f50:	44 f4       	brge	.+16     	; 0xf62 <fputc+0x38>
     f52:	a0 81       	ld	r26, Z
     f54:	b1 81       	ldd	r27, Z+1	; 0x01
     f56:	9d 01       	movw	r18, r26
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	31 83       	std	Z+1, r19	; 0x01
     f5e:	20 83       	st	Z, r18
     f60:	8c 93       	st	X, r24
     f62:	26 81       	ldd	r18, Z+6	; 0x06
     f64:	37 81       	ldd	r19, Z+7	; 0x07
     f66:	2f 5f       	subi	r18, 0xFF	; 255
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	37 83       	std	Z+7, r19	; 0x07
     f6c:	26 83       	std	Z+6, r18	; 0x06
     f6e:	10 c0       	rjmp	.+32     	; 0xf90 <fputc+0x66>
     f70:	eb 01       	movw	r28, r22
     f72:	09 2f       	mov	r16, r25
     f74:	18 2f       	mov	r17, r24
     f76:	00 84       	ldd	r0, Z+8	; 0x08
     f78:	f1 85       	ldd	r31, Z+9	; 0x09
     f7a:	e0 2d       	mov	r30, r0
     f7c:	09 95       	icall
     f7e:	89 2b       	or	r24, r25
     f80:	e1 f6       	brne	.-72     	; 0xf3a <fputc+0x10>
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9f 83       	std	Y+7, r25	; 0x07
     f8a:	8e 83       	std	Y+6, r24	; 0x06
     f8c:	81 2f       	mov	r24, r17
     f8e:	90 2f       	mov	r25, r16
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <__ultoa_invert>:
     f9a:	fa 01       	movw	r30, r20
     f9c:	aa 27       	eor	r26, r26
     f9e:	28 30       	cpi	r18, 0x08	; 8
     fa0:	51 f1       	breq	.+84     	; 0xff6 <__ultoa_invert+0x5c>
     fa2:	20 31       	cpi	r18, 0x10	; 16
     fa4:	81 f1       	breq	.+96     	; 0x1006 <__ultoa_invert+0x6c>
     fa6:	e8 94       	clt
     fa8:	6f 93       	push	r22
     faa:	6e 7f       	andi	r22, 0xFE	; 254
     fac:	6e 5f       	subi	r22, 0xFE	; 254
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	af 4f       	sbci	r26, 0xFF	; 255
     fb6:	b1 e0       	ldi	r27, 0x01	; 1
     fb8:	3e d0       	rcall	.+124    	; 0x1036 <__ultoa_invert+0x9c>
     fba:	b4 e0       	ldi	r27, 0x04	; 4
     fbc:	3c d0       	rcall	.+120    	; 0x1036 <__ultoa_invert+0x9c>
     fbe:	67 0f       	add	r22, r23
     fc0:	78 1f       	adc	r23, r24
     fc2:	89 1f       	adc	r24, r25
     fc4:	9a 1f       	adc	r25, r26
     fc6:	a1 1d       	adc	r26, r1
     fc8:	68 0f       	add	r22, r24
     fca:	79 1f       	adc	r23, r25
     fcc:	8a 1f       	adc	r24, r26
     fce:	91 1d       	adc	r25, r1
     fd0:	a1 1d       	adc	r26, r1
     fd2:	6a 0f       	add	r22, r26
     fd4:	71 1d       	adc	r23, r1
     fd6:	81 1d       	adc	r24, r1
     fd8:	91 1d       	adc	r25, r1
     fda:	a1 1d       	adc	r26, r1
     fdc:	20 d0       	rcall	.+64     	; 0x101e <__ultoa_invert+0x84>
     fde:	09 f4       	brne	.+2      	; 0xfe2 <__ultoa_invert+0x48>
     fe0:	68 94       	set
     fe2:	3f 91       	pop	r19
     fe4:	2a e0       	ldi	r18, 0x0A	; 10
     fe6:	26 9f       	mul	r18, r22
     fe8:	11 24       	eor	r1, r1
     fea:	30 19       	sub	r19, r0
     fec:	30 5d       	subi	r19, 0xD0	; 208
     fee:	31 93       	st	Z+, r19
     ff0:	de f6       	brtc	.-74     	; 0xfa8 <__ultoa_invert+0xe>
     ff2:	cf 01       	movw	r24, r30
     ff4:	08 95       	ret
     ff6:	46 2f       	mov	r20, r22
     ff8:	47 70       	andi	r20, 0x07	; 7
     ffa:	40 5d       	subi	r20, 0xD0	; 208
     ffc:	41 93       	st	Z+, r20
     ffe:	b3 e0       	ldi	r27, 0x03	; 3
    1000:	0f d0       	rcall	.+30     	; 0x1020 <__ultoa_invert+0x86>
    1002:	c9 f7       	brne	.-14     	; 0xff6 <__ultoa_invert+0x5c>
    1004:	f6 cf       	rjmp	.-20     	; 0xff2 <__ultoa_invert+0x58>
    1006:	46 2f       	mov	r20, r22
    1008:	4f 70       	andi	r20, 0x0F	; 15
    100a:	40 5d       	subi	r20, 0xD0	; 208
    100c:	4a 33       	cpi	r20, 0x3A	; 58
    100e:	18 f0       	brcs	.+6      	; 0x1016 <__ultoa_invert+0x7c>
    1010:	49 5d       	subi	r20, 0xD9	; 217
    1012:	31 fd       	sbrc	r19, 1
    1014:	40 52       	subi	r20, 0x20	; 32
    1016:	41 93       	st	Z+, r20
    1018:	02 d0       	rcall	.+4      	; 0x101e <__ultoa_invert+0x84>
    101a:	a9 f7       	brne	.-22     	; 0x1006 <__ultoa_invert+0x6c>
    101c:	ea cf       	rjmp	.-44     	; 0xff2 <__ultoa_invert+0x58>
    101e:	b4 e0       	ldi	r27, 0x04	; 4
    1020:	a6 95       	lsr	r26
    1022:	97 95       	ror	r25
    1024:	87 95       	ror	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	ba 95       	dec	r27
    102c:	c9 f7       	brne	.-14     	; 0x1020 <__ultoa_invert+0x86>
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	61 05       	cpc	r22, r1
    1032:	71 05       	cpc	r23, r1
    1034:	08 95       	ret
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	0a 2e       	mov	r0, r26
    103c:	06 94       	lsr	r0
    103e:	57 95       	ror	r21
    1040:	47 95       	ror	r20
    1042:	37 95       	ror	r19
    1044:	27 95       	ror	r18
    1046:	ba 95       	dec	r27
    1048:	c9 f7       	brne	.-14     	; 0x103c <__ultoa_invert+0xa2>
    104a:	62 0f       	add	r22, r18
    104c:	73 1f       	adc	r23, r19
    104e:	84 1f       	adc	r24, r20
    1050:	95 1f       	adc	r25, r21
    1052:	a0 1d       	adc	r26, r0
    1054:	08 95       	ret

00001056 <__prologue_saves__>:
    1056:	2f 92       	push	r2
    1058:	3f 92       	push	r3
    105a:	4f 92       	push	r4
    105c:	5f 92       	push	r5
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	ca 1b       	sub	r28, r26
    1080:	db 0b       	sbc	r29, r27
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	09 94       	ijmp

0000108e <__epilogue_restores__>:
    108e:	2a 88       	ldd	r2, Y+18	; 0x12
    1090:	39 88       	ldd	r3, Y+17	; 0x11
    1092:	48 88       	ldd	r4, Y+16	; 0x10
    1094:	5f 84       	ldd	r5, Y+15	; 0x0f
    1096:	6e 84       	ldd	r6, Y+14	; 0x0e
    1098:	7d 84       	ldd	r7, Y+13	; 0x0d
    109a:	8c 84       	ldd	r8, Y+12	; 0x0c
    109c:	9b 84       	ldd	r9, Y+11	; 0x0b
    109e:	aa 84       	ldd	r10, Y+10	; 0x0a
    10a0:	b9 84       	ldd	r11, Y+9	; 0x09
    10a2:	c8 84       	ldd	r12, Y+8	; 0x08
    10a4:	df 80       	ldd	r13, Y+7	; 0x07
    10a6:	ee 80       	ldd	r14, Y+6	; 0x06
    10a8:	fd 80       	ldd	r15, Y+5	; 0x05
    10aa:	0c 81       	ldd	r16, Y+4	; 0x04
    10ac:	1b 81       	ldd	r17, Y+3	; 0x03
    10ae:	aa 81       	ldd	r26, Y+2	; 0x02
    10b0:	b9 81       	ldd	r27, Y+1	; 0x01
    10b2:	ce 0f       	add	r28, r30
    10b4:	d1 1d       	adc	r29, r1
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	ed 01       	movw	r28, r26
    10c2:	08 95       	ret

000010c4 <_exit>:
    10c4:	f8 94       	cli

000010c6 <__stop_program>:
    10c6:	ff cf       	rjmp	.-2      	; 0x10c6 <__stop_program>

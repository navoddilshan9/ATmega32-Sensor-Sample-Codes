
adc_demo_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000051  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
}

void main()
{
	uint16_t adc_result;
   DDRD=0b00010000; // set pin 4 on port D as output to control the buzzer
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	81 bb       	out	0x11, r24	; 17

   DDRA&=~(1<<0);
  86:	d0 98       	cbi	0x1a, 0	; 26
#include <util/delay.h>


void InitADC()
{
	ADMUX=(1<<REFS0);									// For Aref=AVcc;
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	// Prescalar div factor =128
  8c:	87 e8       	ldi	r24, 0x87	; 135
  8e:	86 b9       	out	0x06, r24	; 6

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX&=0b11100000;
  90:	87 b1       	in	r24, 0x07	; 7
  92:	80 7e       	andi	r24, 0xE0	; 224
  94:	87 b9       	out	0x07, r24	; 7
	ADMUX|=ch;
  96:	87 b1       	in	r24, 0x07	; 7
  98:	87 b9       	out	0x07, r24	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  9a:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  9c:	34 9b       	sbis	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x1a>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
  a0:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	95 b1       	in	r25, 0x05	; 5
	while(1)
	{
		adc_result=ReadADC(0);           // Read Analog value from channel-0
		
		
		if(adc_result<limit){
  a6:	83 3a       	cpi	r24, 0xA3	; 163
  a8:	23 e0       	ldi	r18, 0x03	; 3
  aa:	92 07       	cpc	r25, r18
  ac:	10 f4       	brcc	.+4      	; 0xb2 <main+0x30>
			PORTD|=(1<<4); //turn on the buzzer
  ae:	94 9a       	sbi	0x12, 4	; 18
  b0:	ef cf       	rjmp	.-34     	; 0x90 <main+0xe>
			
		}
		if(adc_result>limit)
  b2:	83 3a       	cpi	r24, 0xA3	; 163
  b4:	93 40       	sbci	r25, 0x03	; 3
  b6:	61 f3       	breq	.-40     	; 0x90 <main+0xe>
		{
			PORTD&=~(1<<4); //turn off the buzzer
  b8:	94 98       	cbi	0x12, 4	; 18
  ba:	ea cf       	rjmp	.-44     	; 0x90 <main+0xe>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>


color_Sen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c50  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000572  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000764  00000000  00000000  000024c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 38 01 	call	0x270	; 0x270 <main>
  64:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MeasureR>:
	}

}

uint32_t MeasureR()
{
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
	TCSSelectRed();
  74:	0e 94 76 01 	call	0x2ec	; 0x2ec <TCSSelectRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	8f e3       	ldi	r24, 0x3F	; 63
  7a:	9c e9       	ldi	r25, 0x9C	; 156
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <MeasureR+0x10>
  80:	00 c0       	rjmp	.+0      	; 0x82 <MeasureR+0x16>
  82:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
  84:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
  88:	6b 01       	movw	r12, r22
  8a:	7c 01       	movw	r14, r24
  8c:	8f e3       	ldi	r24, 0x3F	; 63
  8e:	9c e9       	ldi	r25, 0x9C	; 156
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <MeasureR+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <MeasureR+0x2a>
  96:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
  98:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
  9c:	c6 0e       	add	r12, r22
  9e:	d7 1e       	adc	r13, r23
  a0:	e8 1e       	adc	r14, r24
  a2:	f9 1e       	adc	r15, r25
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	9c e9       	ldi	r25, 0x9C	; 156
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <MeasureR+0x3c>
  ac:	00 c0       	rjmp	.+0      	; 0xae <MeasureR+0x42>
  ae:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
  b0:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>

	return r/3.3;
  b4:	6c 0d       	add	r22, r12
  b6:	7d 1d       	adc	r23, r13
  b8:	8e 1d       	adc	r24, r14
  ba:	9f 1d       	adc	r25, r15
  bc:	0e 94 41 02 	call	0x482	; 0x482 <__floatunsisf>
  c0:	23 e3       	ldi	r18, 0x33	; 51
  c2:	33 e3       	ldi	r19, 0x33	; 51
  c4:	43 e5       	ldi	r20, 0x53	; 83
  c6:	50 e4       	ldi	r21, 0x40	; 64
  c8:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3>
  cc:	0e 94 12 02 	call	0x424	; 0x424 <__fixunssfsi>

}
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	df 90       	pop	r13
  d6:	cf 90       	pop	r12
  d8:	08 95       	ret

000000da <MeasureG>:

uint32_t MeasureG()
{
  da:	8f 92       	push	r8
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
	TCSSelectGreen();
  ec:	0e 94 79 01 	call	0x2f2	; 0x2f2 <TCSSelectGreen>
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	9c e9       	ldi	r25, 0x9C	; 156
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <MeasureG+0x1a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <MeasureG+0x20>
  fa:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
  fc:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
 100:	6b 01       	movw	r12, r22
 102:	7c 01       	movw	r14, r24
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9c e9       	ldi	r25, 0x9C	; 156
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <MeasureG+0x2e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <MeasureG+0x34>
 10e:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 110:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
 114:	c6 0e       	add	r12, r22
 116:	d7 1e       	adc	r13, r23
 118:	e8 1e       	adc	r14, r24
 11a:	f9 1e       	adc	r15, r25
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <MeasureG+0x46>
 124:	00 c0       	rjmp	.+0      	; 0x126 <MeasureG+0x4c>
 126:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 128:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>

	return r/3;
 12c:	6c 0d       	add	r22, r12
 12e:	7d 1d       	adc	r23, r13
 130:	8e 1d       	adc	r24, r14
 132:	9f 1d       	adc	r25, r15
 134:	2b ea       	ldi	r18, 0xAB	; 171
 136:	3a ea       	ldi	r19, 0xAA	; 170
 138:	4a ea       	ldi	r20, 0xAA	; 170
 13a:	5a ea       	ldi	r21, 0xAA	; 170
 13c:	0e 94 cf 02 	call	0x59e	; 0x59e <__umulsidi3>
 140:	00 e2       	ldi	r16, 0x20	; 32
 142:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__lshrdi3>
 146:	82 2e       	mov	r8, r18
 148:	93 2e       	mov	r9, r19
 14a:	a4 2e       	mov	r10, r20
 14c:	b5 2e       	mov	r11, r21
 14e:	c5 01       	movw	r24, r10
 150:	b4 01       	movw	r22, r8
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	77 95       	ror	r23
 158:	67 95       	ror	r22

}
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	bf 90       	pop	r11
 166:	af 90       	pop	r10
 168:	9f 90       	pop	r9
 16a:	8f 90       	pop	r8
 16c:	08 95       	ret

0000016e <MeasureB>:

uint32_t MeasureB()
{
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
	TCSSelectBlue();
 176:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TCSSelectBlue>
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	9c e9       	ldi	r25, 0x9C	; 156
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <MeasureB+0x10>
 182:	00 c0       	rjmp	.+0      	; 0x184 <MeasureB+0x16>
 184:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
 186:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
 18a:	6b 01       	movw	r12, r22
 18c:	7c 01       	movw	r14, r24
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	9c e9       	ldi	r25, 0x9C	; 156
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <MeasureB+0x24>
 196:	00 c0       	rjmp	.+0      	; 0x198 <MeasureB+0x2a>
 198:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 19a:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
 19e:	c6 0e       	add	r12, r22
 1a0:	d7 1e       	adc	r13, r23
 1a2:	e8 1e       	adc	r14, r24
 1a4:	f9 1e       	adc	r15, r25
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9c e9       	ldi	r25, 0x9C	; 156
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <MeasureB+0x3c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <MeasureB+0x42>
 1b0:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 1b2:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>

	return r/4.2;
 1b6:	6c 0d       	add	r22, r12
 1b8:	7d 1d       	adc	r23, r13
 1ba:	8e 1d       	adc	r24, r14
 1bc:	9f 1d       	adc	r25, r15
 1be:	0e 94 41 02 	call	0x482	; 0x482 <__floatunsisf>
 1c2:	26 e6       	ldi	r18, 0x66	; 102
 1c4:	36 e6       	ldi	r19, 0x66	; 102
 1c6:	46 e8       	ldi	r20, 0x86	; 134
 1c8:	50 e4       	ldi	r21, 0x40	; 64
 1ca:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3>
 1ce:	0e 94 12 02 	call	0x424	; 0x424 <__fixunssfsi>

}
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <MeasureC>:

uint32_t MeasureC()
{
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
	TCSSelectClear();
 1ee:	0e 94 7f 01 	call	0x2fe	; 0x2fe <TCSSelectClear>
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9c e9       	ldi	r25, 0x9C	; 156
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <MeasureC+0x1a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <MeasureC+0x20>
 1fc:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
 1fe:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9c e9       	ldi	r25, 0x9C	; 156
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <MeasureC+0x2e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <MeasureC+0x34>
 210:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 212:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>
 216:	c6 0e       	add	r12, r22
 218:	d7 1e       	adc	r13, r23
 21a:	e8 1e       	adc	r14, r24
 21c:	f9 1e       	adc	r15, r25
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9c e9       	ldi	r25, 0x9C	; 156
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <MeasureC+0x46>
 226:	00 c0       	rjmp	.+0      	; 0x228 <MeasureC+0x4c>
 228:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 22a:	0e 94 82 01 	call	0x304	; 0x304 <TCSMeasure>

	return r/3;
 22e:	6c 0d       	add	r22, r12
 230:	7d 1d       	adc	r23, r13
 232:	8e 1d       	adc	r24, r14
 234:	9f 1d       	adc	r25, r15
 236:	2b ea       	ldi	r18, 0xAB	; 171
 238:	3a ea       	ldi	r19, 0xAA	; 170
 23a:	4a ea       	ldi	r20, 0xAA	; 170
 23c:	5a ea       	ldi	r21, 0xAA	; 170
 23e:	0e 94 cf 02 	call	0x59e	; 0x59e <__umulsidi3>
 242:	00 e2       	ldi	r16, 0x20	; 32
 244:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__lshrdi3>
 248:	82 2e       	mov	r8, r18
 24a:	93 2e       	mov	r9, r19
 24c:	a4 2e       	mov	r10, r20
 24e:	b5 2e       	mov	r11, r21
 250:	c5 01       	movw	r24, r10
 252:	b4 01       	movw	r22, r8
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	77 95       	ror	r23
 25a:	67 95       	ror	r22
}
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	bf 90       	pop	r11
 268:	af 90       	pop	r10
 26a:	9f 90       	pop	r9
 26c:	8f 90       	pop	r8
 26e:	08 95       	ret

00000270 <main>:

int main(void)
{
	
	//Initialize TCS Library
	InitTCS3200();
 270:	0e 94 72 01 	call	0x2e4	; 0x2e4 <InitTCS3200>

	uint8_t x=0;
	int8_t vx=1;
 274:	d1 e0       	ldi	r29, 0x01	; 1
{
	
	//Initialize TCS Library
	InitTCS3200();

	uint8_t x=0;
 276:	c0 e0       	ldi	r28, 0x00	; 0
	int8_t vx=1;

	while(1)
	{
		
		TCSLEDOn();
 278:	db 9a       	sbi	0x1b, 3	; 27
		uint32_t v1=MeasureC();
 27a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <MeasureC>
 27e:	6b 01       	movw	r12, r22
 280:	7c 01       	movw	r14, r24
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	81 ee       	ldi	r24, 0xE1	; 225
 286:	94 e0       	ldi	r25, 0x04	; 4
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x18>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x22>
 292:	00 00       	nop

		_delay_ms(100);

		TCSLEDOff();
 294:	db 98       	cbi	0x1b, 3	; 27
		uint32_t v2=MeasureC();
 296:	0e 94 ee 00 	call	0x1dc	; 0x1dc <MeasureC>

		uint32_t d=v1-v2;

		if(d>8000)
 29a:	c6 1a       	sub	r12, r22
 29c:	d7 0a       	sbc	r13, r23
 29e:	e8 0a       	sbc	r14, r24
 2a0:	f9 0a       	sbc	r15, r25
 2a2:	21 e4       	ldi	r18, 0x41	; 65
 2a4:	c2 16       	cp	r12, r18
 2a6:	2f e1       	ldi	r18, 0x1F	; 31
 2a8:	d2 06       	cpc	r13, r18
 2aa:	e1 04       	cpc	r14, r1
 2ac:	f1 04       	cpc	r15, r1
 2ae:	88 f0       	brcs	.+34     	; 0x2d2 <main+0x62>
		{

			//Show
			uint32_t r,g,b;

			TCSLEDOn();
 2b0:	db 9a       	sbi	0x1b, 3	; 27

			r=MeasureR();
 2b2:	0e 94 36 00 	call	0x6c	; 0x6c <MeasureR>
			g=MeasureG();
 2b6:	0e 94 6d 00 	call	0xda	; 0xda <MeasureG>
			b=MeasureB();
 2ba:	0e 94 b7 00 	call	0x16e	; 0x16e <MeasureB>

			TCSLEDOff();
 2be:	db 98       	cbi	0x1b, 3	; 27
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	97 ea       	ldi	r25, 0xA7	; 167
 2c4:	21 e6       	ldi	r18, 0x61	; 97
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	20 40       	sbci	r18, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x56>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x60>
 2d0:	00 00       	nop
			
			
			_delay_ms(2000);
		}

		x+=vx;
 2d2:	8d 2f       	mov	r24, r29
 2d4:	cd 0f       	add	r28, r29
		if(x==15 || x==0)
 2d6:	cf 30       	cpi	r28, 0x0F	; 15
 2d8:	11 f0       	breq	.+4      	; 0x2de <main+0x6e>
 2da:	c1 11       	cpse	r28, r1
 2dc:	cd cf       	rjmp	.-102    	; 0x278 <main+0x8>
		vx=vx*-1;
 2de:	d8 2f       	mov	r29, r24
 2e0:	d1 95       	neg	r29
 2e2:	ca cf       	rjmp	.-108    	; 0x278 <main+0x8>

000002e4 <InitTCS3200>:
#include "tcs3200.h"

void InitTCS3200()
{
	//Initialize S2 and S3 line as OUTPUT
	TCS_S2_DDR|=(1<<TCS_S2_POS);
 2e4:	d0 9a       	sbi	0x1a, 0	; 26
	TCS_S3_DDR|=(1<<TCS_S3_POS);
 2e6:	d1 9a       	sbi	0x1a, 1	; 26
	
	//LED Port
	TCS_LED_DDR|=(1<<TCS_LED_POS);	
 2e8:	d3 9a       	sbi	0x1a, 3	; 26
 2ea:	08 95       	ret

000002ec <TCSSelectRed>:
}


void TCSSelectRed()
{
	TCSS2Low();
 2ec:	d8 98       	cbi	0x1b, 0	; 27
	TCSS3Low();
 2ee:	d9 98       	cbi	0x1b, 1	; 27
 2f0:	08 95       	ret

000002f2 <TCSSelectGreen>:
}

void TCSSelectGreen()
{
	TCSS2High();
 2f2:	d8 9a       	sbi	0x1b, 0	; 27
	TCSS3High();
 2f4:	d9 9a       	sbi	0x1b, 1	; 27
 2f6:	08 95       	ret

000002f8 <TCSSelectBlue>:
}

void TCSSelectBlue()
{
	TCSS2Low();
 2f8:	d8 98       	cbi	0x1b, 0	; 27
	TCSS3High();
 2fa:	d9 9a       	sbi	0x1b, 1	; 27
 2fc:	08 95       	ret

000002fe <TCSSelectClear>:
}

void TCSSelectClear()
{
	TCSS2High();
 2fe:	d8 9a       	sbi	0x1b, 0	; 27
	TCSS3Low();
 300:	d9 98       	cbi	0x1b, 1	; 27
 302:	08 95       	ret

00000304 <TCSMeasure>:

uint32_t TCSMeasure()
{
	//If the function is entered when the level on OUT line was low
	//Then wait for it to become high.
	if(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)))
 304:	ca 99       	sbic	0x19, 2	; 25
 306:	02 c0       	rjmp	.+4      	; 0x30c <TCSMeasure+0x8>
	{
		while(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)));	//Wait for rising edge	
 308:	ca 9b       	sbis	0x19, 2	; 25
 30a:	fe cf       	rjmp	.-4      	; 0x308 <TCSMeasure+0x4>
	}
	
	
	while(TCS_OUT_PORT & (1<<TCS_OUT_POS));	//Wait for falling edge
 30c:	ca 99       	sbic	0x19, 2	; 25
 30e:	fe cf       	rjmp	.-4      	; 0x30c <TCSMeasure+0x8>
	
	TCNT1=0x0000;//Reset Counter
 310:	1d bc       	out	0x2d, r1	; 45
 312:	1c bc       	out	0x2c, r1	; 44
	
	TCCR1B=(1<<CS10);	//Prescaller = F_CPU/1 (Start Counting)
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	8e bd       	out	0x2e, r24	; 46
	
	while(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)));	//Wait for rising edge
 318:	ca 9b       	sbis	0x19, 2	; 25
 31a:	fe cf       	rjmp	.-4      	; 0x318 <TCSMeasure+0x14>
	
	//Stop Timer
	TCCR1B=0x00;
 31c:	1e bc       	out	0x2e, r1	; 46
	
	return ((float)8000000UL/TCNT1);
 31e:	6c b5       	in	r22, 0x2c	; 44
 320:	7d b5       	in	r23, 0x2d	; 45
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 41 02 	call	0x482	; 0x482 <__floatunsisf>
 32a:	9b 01       	movw	r18, r22
 32c:	ac 01       	movw	r20, r24
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	74 e2       	ldi	r23, 0x24	; 36
 332:	84 ef       	ldi	r24, 0xF4	; 244
 334:	9a e4       	ldi	r25, 0x4A	; 74
 336:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3>
 33a:	0e 94 12 02 	call	0x424	; 0x424 <__fixunssfsi>
	
 33e:	08 95       	ret

00000340 <__divsf3>:
 340:	0e 94 b4 01 	call	0x368	; 0x368 <__divsf3x>
 344:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_round>
 348:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_pscB>
 34c:	58 f0       	brcs	.+22     	; 0x364 <__divsf3+0x24>
 34e:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_pscA>
 352:	40 f0       	brcs	.+16     	; 0x364 <__divsf3+0x24>
 354:	29 f4       	brne	.+10     	; 0x360 <__divsf3+0x20>
 356:	5f 3f       	cpi	r21, 0xFF	; 255
 358:	29 f0       	breq	.+10     	; 0x364 <__divsf3+0x24>
 35a:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_inf>
 35e:	51 11       	cpse	r21, r1
 360:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_szero>
 364:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_nan>

00000368 <__divsf3x>:
 368:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_split3>
 36c:	68 f3       	brcs	.-38     	; 0x348 <__divsf3+0x8>

0000036e <__divsf3_pse>:
 36e:	99 23       	and	r25, r25
 370:	b1 f3       	breq	.-20     	; 0x35e <__divsf3+0x1e>
 372:	55 23       	and	r21, r21
 374:	91 f3       	breq	.-28     	; 0x35a <__divsf3+0x1a>
 376:	95 1b       	sub	r25, r21
 378:	55 0b       	sbc	r21, r21
 37a:	bb 27       	eor	r27, r27
 37c:	aa 27       	eor	r26, r26
 37e:	62 17       	cp	r22, r18
 380:	73 07       	cpc	r23, r19
 382:	84 07       	cpc	r24, r20
 384:	38 f0       	brcs	.+14     	; 0x394 <__divsf3_pse+0x26>
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	44 1f       	adc	r20, r20
 390:	aa 1f       	adc	r26, r26
 392:	a9 f3       	breq	.-22     	; 0x37e <__divsf3_pse+0x10>
 394:	35 d0       	rcall	.+106    	; 0x400 <__LOCK_REGION_LENGTH__>
 396:	0e 2e       	mov	r0, r30
 398:	3a f0       	brmi	.+14     	; 0x3a8 <__divsf3_pse+0x3a>
 39a:	e0 e8       	ldi	r30, 0x80	; 128
 39c:	32 d0       	rcall	.+100    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 39e:	91 50       	subi	r25, 0x01	; 1
 3a0:	50 40       	sbci	r21, 0x00	; 0
 3a2:	e6 95       	lsr	r30
 3a4:	00 1c       	adc	r0, r0
 3a6:	ca f7       	brpl	.-14     	; 0x39a <__divsf3_pse+0x2c>
 3a8:	2b d0       	rcall	.+86     	; 0x400 <__LOCK_REGION_LENGTH__>
 3aa:	fe 2f       	mov	r31, r30
 3ac:	29 d0       	rcall	.+82     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	bb 1f       	adc	r27, r27
 3b6:	26 17       	cp	r18, r22
 3b8:	37 07       	cpc	r19, r23
 3ba:	48 07       	cpc	r20, r24
 3bc:	ab 07       	cpc	r26, r27
 3be:	b0 e8       	ldi	r27, 0x80	; 128
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <__divsf3_pse+0x56>
 3c2:	bb 0b       	sbc	r27, r27
 3c4:	80 2d       	mov	r24, r0
 3c6:	bf 01       	movw	r22, r30
 3c8:	ff 27       	eor	r31, r31
 3ca:	93 58       	subi	r25, 0x83	; 131
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
 3ce:	3a f0       	brmi	.+14     	; 0x3de <__divsf3_pse+0x70>
 3d0:	9e 3f       	cpi	r25, 0xFE	; 254
 3d2:	51 05       	cpc	r21, r1
 3d4:	78 f0       	brcs	.+30     	; 0x3f4 <__divsf3_pse+0x86>
 3d6:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_inf>
 3da:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_szero>
 3de:	5f 3f       	cpi	r21, 0xFF	; 255
 3e0:	e4 f3       	brlt	.-8      	; 0x3da <__divsf3_pse+0x6c>
 3e2:	98 3e       	cpi	r25, 0xE8	; 232
 3e4:	d4 f3       	brlt	.-12     	; 0x3da <__divsf3_pse+0x6c>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b7 95       	ror	r27
 3ee:	f7 95       	ror	r31
 3f0:	9f 5f       	subi	r25, 0xFF	; 255
 3f2:	c9 f7       	brne	.-14     	; 0x3e6 <__divsf3_pse+0x78>
 3f4:	88 0f       	add	r24, r24
 3f6:	91 1d       	adc	r25, r1
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	97 f9       	bld	r25, 7
 3fe:	08 95       	ret
 400:	e1 e0       	ldi	r30, 0x01	; 1
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	bb 1f       	adc	r27, r27
 40a:	62 17       	cp	r22, r18
 40c:	73 07       	cpc	r23, r19
 40e:	84 07       	cpc	r24, r20
 410:	ba 07       	cpc	r27, r26
 412:	20 f0       	brcs	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	62 1b       	sub	r22, r18
 416:	73 0b       	sbc	r23, r19
 418:	84 0b       	sbc	r24, r20
 41a:	ba 0b       	sbc	r27, r26
 41c:	ee 1f       	adc	r30, r30
 41e:	88 f7       	brcc	.-30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 420:	e0 95       	com	r30
 422:	08 95       	ret

00000424 <__fixunssfsi>:
 424:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_splitA>
 428:	88 f0       	brcs	.+34     	; 0x44c <__fixunssfsi+0x28>
 42a:	9f 57       	subi	r25, 0x7F	; 127
 42c:	98 f0       	brcs	.+38     	; 0x454 <__fixunssfsi+0x30>
 42e:	b9 2f       	mov	r27, r25
 430:	99 27       	eor	r25, r25
 432:	b7 51       	subi	r27, 0x17	; 23
 434:	b0 f0       	brcs	.+44     	; 0x462 <__fixunssfsi+0x3e>
 436:	e1 f0       	breq	.+56     	; 0x470 <__fixunssfsi+0x4c>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	1a f0       	brmi	.+6      	; 0x448 <__fixunssfsi+0x24>
 442:	ba 95       	dec	r27
 444:	c9 f7       	brne	.-14     	; 0x438 <__fixunssfsi+0x14>
 446:	14 c0       	rjmp	.+40     	; 0x470 <__fixunssfsi+0x4c>
 448:	b1 30       	cpi	r27, 0x01	; 1
 44a:	91 f0       	breq	.+36     	; 0x470 <__fixunssfsi+0x4c>
 44c:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_zero>
 450:	b1 e0       	ldi	r27, 0x01	; 1
 452:	08 95       	ret
 454:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_zero>
 458:	67 2f       	mov	r22, r23
 45a:	78 2f       	mov	r23, r24
 45c:	88 27       	eor	r24, r24
 45e:	b8 5f       	subi	r27, 0xF8	; 248
 460:	39 f0       	breq	.+14     	; 0x470 <__fixunssfsi+0x4c>
 462:	b9 3f       	cpi	r27, 0xF9	; 249
 464:	cc f3       	brlt	.-14     	; 0x458 <__fixunssfsi+0x34>
 466:	86 95       	lsr	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b3 95       	inc	r27
 46e:	d9 f7       	brne	.-10     	; 0x466 <__fixunssfsi+0x42>
 470:	3e f4       	brtc	.+14     	; 0x480 <__fixunssfsi+0x5c>
 472:	90 95       	com	r25
 474:	80 95       	com	r24
 476:	70 95       	com	r23
 478:	61 95       	neg	r22
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__floatunsisf>:
 482:	e8 94       	clt
 484:	09 c0       	rjmp	.+18     	; 0x498 <__floatsisf+0x12>

00000486 <__floatsisf>:
 486:	97 fb       	bst	r25, 7
 488:	3e f4       	brtc	.+14     	; 0x498 <__floatsisf+0x12>
 48a:	90 95       	com	r25
 48c:	80 95       	com	r24
 48e:	70 95       	com	r23
 490:	61 95       	neg	r22
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	8f 4f       	sbci	r24, 0xFF	; 255
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	99 23       	and	r25, r25
 49a:	a9 f0       	breq	.+42     	; 0x4c6 <__floatsisf+0x40>
 49c:	f9 2f       	mov	r31, r25
 49e:	96 e9       	ldi	r25, 0x96	; 150
 4a0:	bb 27       	eor	r27, r27
 4a2:	93 95       	inc	r25
 4a4:	f6 95       	lsr	r31
 4a6:	87 95       	ror	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	f1 11       	cpse	r31, r1
 4b0:	f8 cf       	rjmp	.-16     	; 0x4a2 <__floatsisf+0x1c>
 4b2:	fa f4       	brpl	.+62     	; 0x4f2 <__floatsisf+0x6c>
 4b4:	bb 0f       	add	r27, r27
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__floatsisf+0x36>
 4b8:	60 ff       	sbrs	r22, 0
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <__floatsisf+0x6c>
 4bc:	6f 5f       	subi	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <__floatsisf+0x6c>
 4c6:	88 23       	and	r24, r24
 4c8:	11 f0       	breq	.+4      	; 0x4ce <__floatsisf+0x48>
 4ca:	96 e9       	ldi	r25, 0x96	; 150
 4cc:	11 c0       	rjmp	.+34     	; 0x4f0 <__floatsisf+0x6a>
 4ce:	77 23       	and	r23, r23
 4d0:	21 f0       	breq	.+8      	; 0x4da <__floatsisf+0x54>
 4d2:	9e e8       	ldi	r25, 0x8E	; 142
 4d4:	87 2f       	mov	r24, r23
 4d6:	76 2f       	mov	r23, r22
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__floatsisf+0x5e>
 4da:	66 23       	and	r22, r22
 4dc:	71 f0       	breq	.+28     	; 0x4fa <__floatsisf+0x74>
 4de:	96 e8       	ldi	r25, 0x86	; 134
 4e0:	86 2f       	mov	r24, r22
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	2a f0       	brmi	.+10     	; 0x4f2 <__floatsisf+0x6c>
 4e8:	9a 95       	dec	r25
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	da f7       	brpl	.-10     	; 0x4e8 <__floatsisf+0x62>
 4f2:	88 0f       	add	r24, r24
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	97 f9       	bld	r25, 7
 4fa:	08 95       	ret

000004fc <__fp_inf>:
 4fc:	97 f9       	bld	r25, 7
 4fe:	9f 67       	ori	r25, 0x7F	; 127
 500:	80 e8       	ldi	r24, 0x80	; 128
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	08 95       	ret

00000508 <__fp_nan>:
 508:	9f ef       	ldi	r25, 0xFF	; 255
 50a:	80 ec       	ldi	r24, 0xC0	; 192
 50c:	08 95       	ret

0000050e <__fp_pscA>:
 50e:	00 24       	eor	r0, r0
 510:	0a 94       	dec	r0
 512:	16 16       	cp	r1, r22
 514:	17 06       	cpc	r1, r23
 516:	18 06       	cpc	r1, r24
 518:	09 06       	cpc	r0, r25
 51a:	08 95       	ret

0000051c <__fp_pscB>:
 51c:	00 24       	eor	r0, r0
 51e:	0a 94       	dec	r0
 520:	12 16       	cp	r1, r18
 522:	13 06       	cpc	r1, r19
 524:	14 06       	cpc	r1, r20
 526:	05 06       	cpc	r0, r21
 528:	08 95       	ret

0000052a <__fp_round>:
 52a:	09 2e       	mov	r0, r25
 52c:	03 94       	inc	r0
 52e:	00 0c       	add	r0, r0
 530:	11 f4       	brne	.+4      	; 0x536 <__fp_round+0xc>
 532:	88 23       	and	r24, r24
 534:	52 f0       	brmi	.+20     	; 0x54a <__fp_round+0x20>
 536:	bb 0f       	add	r27, r27
 538:	40 f4       	brcc	.+16     	; 0x54a <__fp_round+0x20>
 53a:	bf 2b       	or	r27, r31
 53c:	11 f4       	brne	.+4      	; 0x542 <__fp_round+0x18>
 53e:	60 ff       	sbrs	r22, 0
 540:	04 c0       	rjmp	.+8      	; 0x54a <__fp_round+0x20>
 542:	6f 5f       	subi	r22, 0xFF	; 255
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__fp_split3>:
 54c:	57 fd       	sbrc	r21, 7
 54e:	90 58       	subi	r25, 0x80	; 128
 550:	44 0f       	add	r20, r20
 552:	55 1f       	adc	r21, r21
 554:	59 f0       	breq	.+22     	; 0x56c <__fp_splitA+0x10>
 556:	5f 3f       	cpi	r21, 0xFF	; 255
 558:	71 f0       	breq	.+28     	; 0x576 <__fp_splitA+0x1a>
 55a:	47 95       	ror	r20

0000055c <__fp_splitA>:
 55c:	88 0f       	add	r24, r24
 55e:	97 fb       	bst	r25, 7
 560:	99 1f       	adc	r25, r25
 562:	61 f0       	breq	.+24     	; 0x57c <__fp_splitA+0x20>
 564:	9f 3f       	cpi	r25, 0xFF	; 255
 566:	79 f0       	breq	.+30     	; 0x586 <__fp_splitA+0x2a>
 568:	87 95       	ror	r24
 56a:	08 95       	ret
 56c:	12 16       	cp	r1, r18
 56e:	13 06       	cpc	r1, r19
 570:	14 06       	cpc	r1, r20
 572:	55 1f       	adc	r21, r21
 574:	f2 cf       	rjmp	.-28     	; 0x55a <__fp_split3+0xe>
 576:	46 95       	lsr	r20
 578:	f1 df       	rcall	.-30     	; 0x55c <__fp_splitA>
 57a:	08 c0       	rjmp	.+16     	; 0x58c <__fp_splitA+0x30>
 57c:	16 16       	cp	r1, r22
 57e:	17 06       	cpc	r1, r23
 580:	18 06       	cpc	r1, r24
 582:	99 1f       	adc	r25, r25
 584:	f1 cf       	rjmp	.-30     	; 0x568 <__fp_splitA+0xc>
 586:	86 95       	lsr	r24
 588:	71 05       	cpc	r23, r1
 58a:	61 05       	cpc	r22, r1
 58c:	08 94       	sec
 58e:	08 95       	ret

00000590 <__fp_zero>:
 590:	e8 94       	clt

00000592 <__fp_szero>:
 592:	bb 27       	eor	r27, r27
 594:	66 27       	eor	r22, r22
 596:	77 27       	eor	r23, r23
 598:	cb 01       	movw	r24, r22
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret

0000059e <__umulsidi3>:
 59e:	e8 94       	clt

000005a0 <__umulsidi3_helper>:
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	fc 01       	movw	r30, r24
 5a6:	db 01       	movw	r26, r22
 5a8:	0e 94 18 03 	call	0x630	; 0x630 <__umulhisi3>
 5ac:	7f 93       	push	r23
 5ae:	6f 93       	push	r22
 5b0:	e9 01       	movw	r28, r18
 5b2:	9a 01       	movw	r18, r20
 5b4:	ac 01       	movw	r20, r24
 5b6:	bf 93       	push	r27
 5b8:	af 93       	push	r26
 5ba:	3f 93       	push	r19
 5bc:	2f 93       	push	r18
 5be:	df 01       	movw	r26, r30
 5c0:	0e 94 18 03 	call	0x630	; 0x630 <__umulhisi3>
 5c4:	26 f4       	brtc	.+8      	; 0x5ce <__umulsidi3_helper+0x2e>
 5c6:	6c 1b       	sub	r22, r28
 5c8:	7d 0b       	sbc	r23, r29
 5ca:	82 0b       	sbc	r24, r18
 5cc:	93 0b       	sbc	r25, r19
 5ce:	9e 01       	movw	r18, r28
 5d0:	eb 01       	movw	r28, r22
 5d2:	fc 01       	movw	r30, r24
 5d4:	0e 94 27 03 	call	0x64e	; 0x64e <__muldi3_6>
 5d8:	af 91       	pop	r26
 5da:	bf 91       	pop	r27
 5dc:	2f 91       	pop	r18
 5de:	3f 91       	pop	r19
 5e0:	0e 94 27 03 	call	0x64e	; 0x64e <__muldi3_6>
 5e4:	be 01       	movw	r22, r28
 5e6:	cf 01       	movw	r24, r30
 5e8:	f9 01       	movw	r30, r18
 5ea:	2f 91       	pop	r18
 5ec:	3f 91       	pop	r19
 5ee:	cf 91       	pop	r28
 5f0:	df 91       	pop	r29
 5f2:	08 95       	ret

000005f4 <__ashrdi3>:
 5f4:	97 fb       	bst	r25, 7
 5f6:	10 f8       	bld	r1, 0

000005f8 <__lshrdi3>:
 5f8:	16 94       	lsr	r1
 5fa:	00 08       	sbc	r0, r0
 5fc:	0f 93       	push	r16
 5fe:	08 30       	cpi	r16, 0x08	; 8
 600:	98 f0       	brcs	.+38     	; 0x628 <__lshrdi3+0x30>
 602:	08 50       	subi	r16, 0x08	; 8
 604:	23 2f       	mov	r18, r19
 606:	34 2f       	mov	r19, r20
 608:	45 2f       	mov	r20, r21
 60a:	56 2f       	mov	r21, r22
 60c:	67 2f       	mov	r22, r23
 60e:	78 2f       	mov	r23, r24
 610:	89 2f       	mov	r24, r25
 612:	90 2d       	mov	r25, r0
 614:	f4 cf       	rjmp	.-24     	; 0x5fe <__lshrdi3+0x6>
 616:	05 94       	asr	r0
 618:	97 95       	ror	r25
 61a:	87 95       	ror	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	57 95       	ror	r21
 622:	47 95       	ror	r20
 624:	37 95       	ror	r19
 626:	27 95       	ror	r18
 628:	0a 95       	dec	r16
 62a:	aa f7       	brpl	.-22     	; 0x616 <__lshrdi3+0x1e>
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <__umulhisi3>:
 630:	a2 9f       	mul	r26, r18
 632:	b0 01       	movw	r22, r0
 634:	b3 9f       	mul	r27, r19
 636:	c0 01       	movw	r24, r0
 638:	a3 9f       	mul	r26, r19
 63a:	70 0d       	add	r23, r0
 63c:	81 1d       	adc	r24, r1
 63e:	11 24       	eor	r1, r1
 640:	91 1d       	adc	r25, r1
 642:	b2 9f       	mul	r27, r18
 644:	70 0d       	add	r23, r0
 646:	81 1d       	adc	r24, r1
 648:	11 24       	eor	r1, r1
 64a:	91 1d       	adc	r25, r1
 64c:	08 95       	ret

0000064e <__muldi3_6>:
 64e:	0e 94 18 03 	call	0x630	; 0x630 <__umulhisi3>
 652:	46 0f       	add	r20, r22
 654:	57 1f       	adc	r21, r23
 656:	c8 1f       	adc	r28, r24
 658:	d9 1f       	adc	r29, r25
 65a:	08 f4       	brcc	.+2      	; 0x65e <__muldi3_6+0x10>
 65c:	31 96       	adiw	r30, 0x01	; 1
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>

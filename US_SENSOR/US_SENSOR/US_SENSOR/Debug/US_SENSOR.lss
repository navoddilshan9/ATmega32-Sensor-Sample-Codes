
US_SENSOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800080  00800080  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c98  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000745  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c0  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bb  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000028b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  8a:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Peek_A_Boo>:
	DataDir_MrLCDCrib=0xff;					// Put crib to display output
}

void Peek_A_Boo()
{
	MrLCDsControl|=1<<LightSwitch;			// Switch on the light
  92:	c5 9a       	sbi	0x18, 5	; 24
	
	asm volatile("nop");					//wait for some time
  94:	00 00       	nop
	asm volatile("nop");
  96:	00 00       	nop
	
	MrLCDsControl&=~(1<<LightSwitch);			// Switch off the light
  98:	c5 98       	cbi	0x18, 5	; 24
  9a:	08 95       	ret

0000009c <Check_If_Mr_LCD_Is_Busy>:

}

void Check_If_Mr_LCD_Is_Busy()
{
	DataDir_MrLCDCrib=0x00;					//Crib will take the input from the user
  9c:	1a ba       	out	0x1a, r1	; 26
	
	
	MrLCDsControl|=1<<ReadWrite;			// Switch on the read mode
  9e:	c4 9a       	sbi	0x18, 4	; 24
	MrLCDsControl&=~(1<<BipolarMood);			//activate the command mode
  a0:	c3 98       	cbi	0x18, 3	; 24
	
	while (MrLCDsCrib>=0x80)
  a2:	df 9b       	sbis	0x1b, 7	; 27
  a4:	04 c0       	rjmp	.+8      	; 0xae <Check_If_Mr_LCD_Is_Busy+0x12>
	{
		Peek_A_Boo();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	
	
	MrLCDsControl|=1<<ReadWrite;			// Switch on the read mode
	MrLCDsControl&=~(1<<BipolarMood);			//activate the command mode
	
	while (MrLCDsCrib>=0x80)
  aa:	df 99       	sbic	0x1b, 7	; 27
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <Check_If_Mr_LCD_Is_Busy+0xa>
	{
		Peek_A_Boo();
	}
	
	DataDir_MrLCDCrib=0xff;					// Put crib to display output
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret

000000b4 <Send_A_Command>:
	MrLCDsControl&=~(1<<LightSwitch);			// Switch off the light
}


void Send_A_Command(unsigned char command)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	
	Check_If_Mr_LCD_Is_Busy();
  b8:	0e 94 4e 00 	call	0x9c	; 0x9c <Check_If_Mr_LCD_Is_Busy>
	
	MrLCDsCrib=command;						// Load the crib with the 8 bit command
  bc:	cb bb       	out	0x1b, r28	; 27
	
	MrLCDsControl&=~(1<<ReadWrite);			// Set the LCD to write mode
  be:	c4 98       	cbi	0x18, 4	; 24
	MrLCDsControl&=~(1<<BipolarMood);			// Set it to the command mode
  c0:	c3 98       	cbi	0x18, 3	; 24
	Peek_A_Boo();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib=0;							//Erase the crib after use
  c6:	1b ba       	out	0x1b, r1	; 27
}
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <Initialise>:



void Initialise(void)
{
	DataDir_MrLCDsControl|=1<<LightSwitch|1<<ReadWrite|1<<BipolarMood;	//these information will go towards the LCD
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	88 63       	ori	r24, 0x38	; 56
  d0:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e2       	ldi	r24, 0x2F	; 47
  d4:	95 e7       	ldi	r25, 0x75	; 117
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <Initialise+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Initialise+0x10>
  dc:	00 00       	nop

	_delay_ms(15);								// Wait for the LCD to start

	Send_A_Command(0x01);	// to clear the screen
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_A_Command>
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <Initialise+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <Initialise+0x22>
  ee:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);	// TO tell LCD about 8 data lines
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	95 e8       	ldi	r25, 0x85	; 133
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <Initialise+0x2c>
  fc:	00 00       	nop
	_delay_us(50);
	Send_A_Command(0b00001110);	//Some cursor command
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_A_Command>
 104:	85 e8       	ldi	r24, 0x85	; 133
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <Initialise+0x3a>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <Send_A_Character>:
	MrLCDsControl&=~(1<<BipolarMood);			// Set it to the command mode
	Peek_A_Boo();
	MrLCDsCrib=0;							//Erase the crib after use
}
void Send_A_Character(unsigned char character)
{
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
	Check_If_Mr_LCD_Is_Busy();
 112:	0e 94 4e 00 	call	0x9c	; 0x9c <Check_If_Mr_LCD_Is_Busy>
	
	MrLCDsCrib=character;					// load the 8 bit characters on the data line
 116:	cb bb       	out	0x1b, r28	; 27
	
	MrLCDsControl&=~(1<<ReadWrite);			// Set to the write mode
 118:	c4 98       	cbi	0x18, 4	; 24
	MrLCDsControl|=1<<BipolarMood;			// Set it to the character mode
 11a:	c3 9a       	sbi	0x18, 3	; 24
	
	Peek_A_Boo();
 11c:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib=0;							// Erase the crib after use
 120:	1b ba       	out	0x1b, r1	; 27
	
	
}
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <Send_A_String>:

void Send_A_String(char *stringOfChar)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
	while(*stringOfChar>0)
 12c:	88 81       	ld	r24, Y
 12e:	88 23       	and	r24, r24
 130:	31 f0       	breq	.+12     	; 0x13e <Send_A_String+0x18>
 132:	21 96       	adiw	r28, 0x01	; 1
	{
		Send_A_Character(*stringOfChar++);
 134:	0e 94 87 00 	call	0x10e	; 0x10e <Send_A_Character>
	
}

void Send_A_String(char *stringOfChar)
{
	while(*stringOfChar>0)
 138:	89 91       	ld	r24, Y+
 13a:	81 11       	cpse	r24, r1
 13c:	fb cf       	rjmp	.-10     	; 0x134 <Send_A_String+0xe>
	{
		Send_A_Character(*stringOfChar++);
	}
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <GoToMrLCDLocation>:


void GoToMrLCDLocation(uint8_t x, uint8_t y)
{
	Send_A_Command(0x80+ firstColumnPositionForMrLCD[y-1] + (x-1));
 144:	e6 2f       	mov	r30, r22
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e1 5a       	subi	r30, 0xA1	; 161
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	81 58       	subi	r24, 0x81	; 129
 14e:	90 81       	ld	r25, Z
 150:	89 0f       	add	r24, r25
 152:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_A_Command>
 156:	08 95       	ret

00000158 <__vector_1>:
 		}
	}
}

ISR(INT0_vect)                   //count the pulses between rising edges and falling edges through interrupts in INT0 pin
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	if(i == 0)
 166:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 16a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
 16e:	89 2b       	or	r24, r25
 170:	51 f4       	brne	.+20     	; 0x186 <__vector_1+0x2e>
	{
		TCCR1B |= 1<<CS10;
 172:	8e b5       	in	r24, 0x2e	; 46
 174:	81 60       	ori	r24, 0x01	; 1
 176:	8e bd       	out	0x2e, r24	; 46
		i = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x1>
 180:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <__vector_1+0x48>
	}
	else
	{
		TCCR1B = 0;
 186:	1e bc       	out	0x2e, r1	; 46
		pulse = TCNT1;
 188:	8c b5       	in	r24, 0x2c	; 44
 18a:	9d b5       	in	r25, 0x2d	; 45
 18c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <pulse+0x1>
 190:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <pulse>
		TCNT1 = 0;
 194:	1d bc       	out	0x2d, r1	; 45
 196:	1c bc       	out	0x2c, r1	; 44
		i = 0;
 198:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__data_end+0x1>
 19c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
	}
}
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <display>:


void display(int16_t count,int k){      
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	65 97       	sbiw	r28, 0x15	; 21
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	8c 01       	movw	r16, r24
 1c8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ca:	4a e0       	ldi	r20, 0x0A	; 10
 1cc:	be 01       	movw	r22, r28
 1ce:	6f 5e       	subi	r22, 0xEF	; 239
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	04 97       	sbiw	r24, 0x04	; 4
 1d4:	0e 94 8e 01 	call	0x31c	; 0x31c <__itoa_ncheck>
	
	int16_t count_a = count/58;
	
	char show_a[16],a[5];
	itoa(k-4,a,10);
	Send_A_String("UltraSonic - 0");
 1d8:	82 e6       	ldi	r24, 0x62	; 98
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 93 00 	call	0x126	; 0x126 <Send_A_String>
	Send_A_String(a);
 1e0:	ce 01       	movw	r24, r28
 1e2:	41 96       	adiw	r24, 0x11	; 17
 1e4:	0e 94 93 00 	call	0x126	; 0x126 <Send_A_String>
	GoToMrLCDLocation(1,2);
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 a2 00 	call	0x144	; 0x144 <GoToMrLCDLocation>
	Send_A_String("Distance=");
 1f0:	81 e7       	ldi	r24, 0x71	; 113
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 93 00 	call	0x126	; 0x126 <Send_A_String>
 1f8:	c8 01       	movw	r24, r16
 1fa:	6a e3       	ldi	r22, 0x3A	; 58
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 66 01 	call	0x2cc	; 0x2cc <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	4a e0       	ldi	r20, 0x0A	; 10
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	0e 94 8e 01 	call	0x31c	; 0x31c <__itoa_ncheck>
	itoa(count_a,show_a,10);
	Send_A_String(show_a);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 93 00 	call	0x126	; 0x126 <Send_A_String>
	Send_A_String(" ");
 218:	8b e7       	ldi	r24, 0x7B	; 123
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 93 00 	call	0x126	; 0x126 <Send_A_String>
	GoToMrLCDLocation(13,2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	0e 94 a2 00 	call	0x144	; 0x144 <GoToMrLCDLocation>
	Send_A_String("cm");
 228:	8d e7       	ldi	r24, 0x7D	; 125
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 93 00 	call	0x126	; 0x126 <Send_A_String>
	GoToMrLCDLocation(1,1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 a2 00 	call	0x144	; 0x144 <GoToMrLCDLocation>
 238:	65 96       	adiw	r28, 0x15	; 21
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <main>:

int main(void)
{
	
	char show_a[16];
	Initialise();
 24e:	0e 94 66 00 	call	0xcc	; 0xcc <Initialise>
	DDRD = 0b11111011;					 //Define PD2 as echo pin and PIND5,PIND6,PIND7 as trigger pins
 252:	8b ef       	ldi	r24, 0xFB	; 251
 254:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f e7       	ldi	r18, 0x7F	; 127
 258:	38 e3       	ldi	r19, 0x38	; 56
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0xe>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x18>
 266:	00 00       	nop

	_delay_ms(50);
	GICR |= 1<<INT0;					//Enable the external interrupt source in general interrupt control register
 268:	8b b7       	in	r24, 0x3b	; 59
 26a:	80 64       	ori	r24, 0x40	; 64
 26c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC00;				    //Any logical change on INT0 generates an interrupt request
 26e:	85 b7       	in	r24, 0x35	; 53
 270:	81 60       	ori	r24, 0x01	; 1
 272:	85 bf       	out	0x35, r24	; 53

	sei();
 274:	78 94       	sei
	
	while(1)
	{
 		for (int k=5;k<8;k++)         //Triggering pins before waiting 1 seconds  
 		{
	 		PORTD |= 1<<k;
 276:	01 e0       	ldi	r16, 0x01	; 1
 278:	10 e0       	ldi	r17, 0x00	; 0

	sei();
	
	while(1)
	{
 		for (int k=5;k<8;k++)         //Triggering pins before waiting 1 seconds  
 27a:	c5 e0       	ldi	r28, 0x05	; 5
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 		{
	 		PORTD |= 1<<k;
 27e:	22 b3       	in	r18, 0x12	; 18
 280:	c8 01       	movw	r24, r16
 282:	0c 2e       	mov	r0, r28
 284:	02 c0       	rjmp	.+4      	; 0x28a <main+0x3c>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <main+0x38>
 28e:	92 2f       	mov	r25, r18
 290:	98 2b       	or	r25, r24
 292:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	28 e2       	ldi	r18, 0x28	; 40
 296:	2a 95       	dec	r18
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x48>
	 		_delay_us(15);
	 		PORTD &= ~(1<<k);
 29a:	92 b3       	in	r25, 0x12	; 18
 29c:	80 95       	com	r24
 29e:	89 23       	and	r24, r25
 2a0:	82 bb       	out	0x12, r24	; 18
			 
	 		display(pulse,k);         //Call the display function to calculate the distance and display the value
 2a2:	be 01       	movw	r22, r28
 2a4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <pulse>
 2a8:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <pulse+0x1>
 2ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	3f ef       	ldi	r19, 0xFF	; 255
 2b2:	80 e7       	ldi	r24, 0x70	; 112
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	31 50       	subi	r19, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x68>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x72>
 2c0:	00 00       	nop

	sei();
	
	while(1)
	{
 		for (int k=5;k<8;k++)         //Triggering pins before waiting 1 seconds  
 2c2:	21 96       	adiw	r28, 0x01	; 1
 2c4:	c8 30       	cpi	r28, 0x08	; 8
 2c6:	d1 05       	cpc	r29, r1
 2c8:	d1 f6       	brne	.-76     	; 0x27e <main+0x30>
 2ca:	d7 cf       	rjmp	.-82     	; 0x27a <main+0x2c>

000002cc <__divmodhi4>:
 2cc:	97 fb       	bst	r25, 7
 2ce:	07 2e       	mov	r0, r23
 2d0:	16 f4       	brtc	.+4      	; 0x2d6 <__divmodhi4+0xa>
 2d2:	00 94       	com	r0
 2d4:	07 d0       	rcall	.+14     	; 0x2e4 <__divmodhi4_neg1>
 2d6:	77 fd       	sbrc	r23, 7
 2d8:	09 d0       	rcall	.+18     	; 0x2ec <__divmodhi4_neg2>
 2da:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__udivmodhi4>
 2de:	07 fc       	sbrc	r0, 7
 2e0:	05 d0       	rcall	.+10     	; 0x2ec <__divmodhi4_neg2>
 2e2:	3e f4       	brtc	.+14     	; 0x2f2 <__divmodhi4_exit>

000002e4 <__divmodhi4_neg1>:
 2e4:	90 95       	com	r25
 2e6:	81 95       	neg	r24
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__divmodhi4_neg2>:
 2ec:	70 95       	com	r23
 2ee:	61 95       	neg	r22
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255

000002f2 <__divmodhi4_exit>:
 2f2:	08 95       	ret

000002f4 <__udivmodhi4>:
 2f4:	aa 1b       	sub	r26, r26
 2f6:	bb 1b       	sub	r27, r27
 2f8:	51 e1       	ldi	r21, 0x11	; 17
 2fa:	07 c0       	rjmp	.+14     	; 0x30a <__udivmodhi4_ep>

000002fc <__udivmodhi4_loop>:
 2fc:	aa 1f       	adc	r26, r26
 2fe:	bb 1f       	adc	r27, r27
 300:	a6 17       	cp	r26, r22
 302:	b7 07       	cpc	r27, r23
 304:	10 f0       	brcs	.+4      	; 0x30a <__udivmodhi4_ep>
 306:	a6 1b       	sub	r26, r22
 308:	b7 0b       	sbc	r27, r23

0000030a <__udivmodhi4_ep>:
 30a:	88 1f       	adc	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	5a 95       	dec	r21
 310:	a9 f7       	brne	.-22     	; 0x2fc <__udivmodhi4_loop>
 312:	80 95       	com	r24
 314:	90 95       	com	r25
 316:	bc 01       	movw	r22, r24
 318:	cd 01       	movw	r24, r26
 31a:	08 95       	ret

0000031c <__itoa_ncheck>:
 31c:	bb 27       	eor	r27, r27
 31e:	4a 30       	cpi	r20, 0x0A	; 10
 320:	31 f4       	brne	.+12     	; 0x32e <__itoa_ncheck+0x12>
 322:	99 23       	and	r25, r25
 324:	22 f4       	brpl	.+8      	; 0x32e <__itoa_ncheck+0x12>
 326:	bd e2       	ldi	r27, 0x2D	; 45
 328:	90 95       	com	r25
 32a:	81 95       	neg	r24
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	0c 94 9a 01 	jmp	0x334	; 0x334 <__utoa_common>

00000332 <__utoa_ncheck>:
 332:	bb 27       	eor	r27, r27

00000334 <__utoa_common>:
 334:	fb 01       	movw	r30, r22
 336:	55 27       	eor	r21, r21
 338:	aa 27       	eor	r26, r26
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	aa 1f       	adc	r26, r26
 340:	a4 17       	cp	r26, r20
 342:	10 f0       	brcs	.+4      	; 0x348 <__utoa_common+0x14>
 344:	a4 1b       	sub	r26, r20
 346:	83 95       	inc	r24
 348:	50 51       	subi	r21, 0x10	; 16
 34a:	b9 f7       	brne	.-18     	; 0x33a <__utoa_common+0x6>
 34c:	a0 5d       	subi	r26, 0xD0	; 208
 34e:	aa 33       	cpi	r26, 0x3A	; 58
 350:	08 f0       	brcs	.+2      	; 0x354 <__utoa_common+0x20>
 352:	a9 5d       	subi	r26, 0xD9	; 217
 354:	a1 93       	st	Z+, r26
 356:	00 97       	sbiw	r24, 0x00	; 0
 358:	79 f7       	brne	.-34     	; 0x338 <__utoa_common+0x4>
 35a:	b1 11       	cpse	r27, r1
 35c:	b1 93       	st	Z+, r27
 35e:	11 92       	st	Z+, r1
 360:	cb 01       	movw	r24, r22
 362:	0c 94 b3 01 	jmp	0x366	; 0x366 <strrev>

00000366 <strrev>:
 366:	dc 01       	movw	r26, r24
 368:	fc 01       	movw	r30, r24
 36a:	67 2f       	mov	r22, r23
 36c:	71 91       	ld	r23, Z+
 36e:	77 23       	and	r23, r23
 370:	e1 f7       	brne	.-8      	; 0x36a <strrev+0x4>
 372:	32 97       	sbiw	r30, 0x02	; 2
 374:	04 c0       	rjmp	.+8      	; 0x37e <strrev+0x18>
 376:	7c 91       	ld	r23, X
 378:	6d 93       	st	X+, r22
 37a:	70 83       	st	Z, r23
 37c:	62 91       	ld	r22, -Z
 37e:	ae 17       	cp	r26, r30
 380:	bf 07       	cpc	r27, r31
 382:	c8 f3       	brcs	.-14     	; 0x376 <strrev+0x10>
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
